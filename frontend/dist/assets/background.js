var T=Object.defineProperty;var A=(d,e,t)=>e in d?T(d,e,{enumerable:!0,configurable:!0,writable:!0,value:t}):d[e]=t;var n=(d,e,t)=>(A(d,typeof e!="symbol"?e+"":e,t),t);import{G as y,n as G,a as O,F as B,K as h,E as f,b as I,R as u,J as m,j as w,U as E,M as k,Z as L,c as _,d as N,e as P,h as K,i as C,k as D}from"./zkLogin.js";console.log("BACKGROUND SCRIPT LOADED - STARTUP CHECK");chrome.identity?console.log("chrome.identity API is available"):console.error("chrome.identity API is NOT available");console.log("Configuration check:");console.log("GOOGLE_CLIENT_ID:",y);console.log("REDIRECT_URI:",G);class v{constructor(){n(this,"credentials",[{id:1,name:"Gmail",url:"gmail.com",username:"john.doe@gmail.com",password:"MySecure2023!"},{id:2,name:"GitHub",url:"github.com",username:"johndoe_dev",password:"CodeMaster#456"},{id:3,name:"Amazon",url:"amazon.com",username:"john.doe@email.com",password:"Shop2023$ecure"},{id:4,name:"Work Portal",url:"company.com",username:"j.doe",password:"Work@Pass789"},{id:5,name:"LinkedIn",url:"linkedin.com",username:"john-doe-professional",password:"Network#2023"}]);n(this,"suiClient",new O({url:B}));n(this,"ephemeralKeyPair");n(this,"randomness","");n(this,"nonce","");n(this,"maxEpoch",0);n(this,"currentEpoch","");n(this,"jwtToken","");n(this,"decodedJwt");n(this,"userSalt");n(this,"userAddress","");n(this,"zkProofData");n(this,"extendedEphemeralPublicKey","");n(this,"zkLoginState",{isLoggedIn:!1});this.setupMessageHandlers(),this.loadCredentials(),this.loadZkLoginState()}setupMessageHandlers(){chrome.runtime.onMessage.addListener((e,t,r)=>(this.handleMessage(e,t,r),!0)),chrome.runtime.onInstalled.addListener(()=>{console.log("Grand Warden extension installed"),this.saveCredentials()}),chrome.tabs.onUpdated.addListener((e,t,r)=>{t.status==="complete"&&r.url&&this.checkForLoginPage(e,r.url)})}async handleMessage(e,t,r){switch(e.type){case"GET_CREDENTIALS_FOR_DOMAIN":const s=this.getCredentialsForDomain(e.domain);r({success:!0,credentials:s,domain:e.domain});break;case"SAVE_CREDENTIAL":const a=await this.saveNewCredential(e.credential);r({success:a,id:a?Date.now():null});break;case"GET_ALL_CREDENTIALS":r({success:!0,credentials:this.credentials});break;case"DELETE_CREDENTIAL":const g=this.deleteCredential(e.id);r({success:g});break;case"UPDATE_CREDENTIAL":const c=this.updateCredential(e.id,e.credential);r({success:c});break;case"OPEN_SAVE_DIALOG":this.openPopupWithContext(e.domain,e.url),r({success:!0});break;case"ZKLOGIN_PREPARE":console.log("Background: Received ZKLOGIN_PREPARE message");try{console.log("Background: Calling prepareForLogin"),this.prepareForLogin().then(o=>{console.log("Background: Login prepared successfully with nonce:",o),r({success:!0,nonce:o})}).catch(o=>{console.error("Background: Error preparing for zkLogin:",o),r({success:!1,error:String(o)})})}catch(o){console.error("Background: Error in ZKLOGIN_PREPARE handler:",o),r({success:!1,error:String(o)})}return!0;case"ZKLOGIN_GOOGLE_AUTH":console.log("Background: Received ZKLOGIN_GOOGLE_AUTH message");const l=setTimeout(()=>{console.error("Background: ZKLOGIN_GOOGLE_AUTH timed out"),r&&r({success:!1,error:"Google authentication timed out"})},6e4);try{const o=e.nonce||this.nonce;o?(console.log("Background: Using provided nonce:",o),this.nonce=o):(console.log("Background: Generating nonce for Google auth"),await this.prepareForLogin()),console.log("Background: Calling initiateGoogleAuth...");const i=await this.initiateGoogleAuth();console.log("Background: Got ID token, returning success response"),clearTimeout(l),r({success:!0,idToken:i})}catch(o){console.error("Background: Error during Google auth:",o),clearTimeout(l),r({success:!1,error:String(o)})}return!0;case"ZKLOGIN_GET_USER_SALT":console.log("Background: Received ZKLOGIN_GET_USER_SALT message");try{this.getUserSalt().then(o=>{console.log("Background: Got user salt"),r({success:!0,salt:o})}).catch(o=>{console.error("Background: Error getting user salt:",o),r({success:!1,error:String(o)})})}catch(o){console.error("Background: Error in ZKLOGIN_GET_USER_SALT handler:",o),r({success:!1,error:String(o)})}return!0;case"ZKLOGIN_GENERATE_ADDRESS":console.log("Background: Received ZKLOGIN_GENERATE_ADDRESS message");try{this.generateSuiAddress().then(o=>{console.log("Background: Generated Sui address:",o),r({success:!0,address:o})}).catch(o=>{console.error("Background: Error generating Sui address:",o),r({success:!1,error:String(o)})})}catch(o){console.error("Background: Error in ZKLOGIN_GENERATE_ADDRESS handler:",o),r({success:!1,error:String(o)})}return!0;case"ZKLOGIN_GET_ZK_PROOF":console.log("Background: Received ZKLOGIN_GET_ZK_PROOF message");try{this.getZkProof().then(o=>{console.log("Background: Got ZK proof"),r({success:!0,zkProof:o})}).catch(o=>{console.error("Background: Error getting ZK proof:",o),r({success:!1,error:String(o)})})}catch(o){console.error("Background: Error in ZKLOGIN_GET_ZK_PROOF handler:",o),r({success:!1,error:String(o)})}return!0;case"ZKLOGIN_GET_STATE":r({success:!0,state:this.zkLoginState});break;case"SIMPLE_GOOGLE_AUTH":console.log("Background: Received SIMPLE_GOOGLE_AUTH message");try{if(!chrome.identity){console.error("Background: chrome.identity API is not available"),r({success:!1,error:"chrome.identity API is not available"});return}return console.log("Background: Using chrome.identity.getAuthToken"),chrome.identity.getAuthToken({interactive:!0},async o=>{try{if(console.log("Background: Got auth token:",o?"yes":"no"),!o){console.error("Background: No token returned"),r({success:!1,error:"No authentication token returned"});return}try{const i=await fetch("https://www.googleapis.com/oauth2/v3/userinfo",{headers:{Authorization:`Bearer ${o}`}});if(!i.ok)throw new Error(`Failed to fetch user info: ${i.status}`);const S=await i.json();console.log("Background: Got user info:",S),this.zkLoginState.isLoggedIn=!0,this.zkLoginState.userInfo=S,r({success:!0,userInfo:S,token:o})}catch(i){console.error("Background: Error fetching user info:",i),r({success:!0,token:o})}}catch(i){console.error("Background: Error in SIMPLE_GOOGLE_AUTH callback:",i),r({success:!1,error:String(i)})}}),!0}catch(o){console.error("Background: Error in SIMPLE_GOOGLE_AUTH handler:",o),r({success:!1,error:String(o)})}case"ZKLOGIN_LOGOUT":console.log("Background: Received ZKLOGIN_LOGOUT message");try{this.resetZkLoginState().then(()=>{console.log("Background: zkLogin state reset successfully"),r({success:!0})}).catch(o=>{console.error("Background: Error during logout:",o),r({success:!1,error:String(o)})})}catch(o){console.error("Background: Error in ZKLOGIN_LOGOUT handler:",o),r({success:!1,error:String(o)})}return!0;case"PING":console.log("Background: Received PING message");const p={status:"alive",timestamp:Date.now(),identityAvailable:!!chrome.identity,extension_id:chrome.runtime.id};console.log("Background: Sending PING response",p),r(p);break;default:r({success:!1,error:"Unknown message type"})}}getCredentialsForDomain(e){return this.credentials.filter(t=>{const r=t.url.replace(/^https?:\/\//,"").replace(/^www\./,""),s=e.replace(/^www\./,"");return r===s||r.includes(s)||s.includes(r.replace(".com",""))})}async saveNewCredential(e){try{const t={...e,id:Date.now()+Math.random()};return this.credentials.push(t),await this.saveCredentials(),this.notifyContentScripts("CREDENTIAL_ADDED",t),!0}catch(t){return console.error("Failed to save credential:",t),!1}}deleteCredential(e){const t=this.credentials.findIndex(r=>r.id===e);return t!==-1?(this.credentials.splice(t,1),this.saveCredentials(),!0):!1}updateCredential(e,t){const r=this.credentials.find(s=>s.id===e);return r?(Object.assign(r,t),this.saveCredentials(),!0):!1}async loadCredentials(){try{const e=await chrome.storage.local.get(["grandWardenCredentials"]);e.grandWardenCredentials&&(this.credentials=e.grandWardenCredentials,console.log(`Loaded ${this.credentials.length} saved credentials`))}catch{console.log("Using default credentials (storage not available)")}}async loadZkLoginState(){try{const e=await chrome.storage.session.get(h);e&&e[h]&&(this.ephemeralKeyPair=f.fromSecretKey(I(e[h])));const t=await chrome.storage.session.get(u);t&&t[u]&&(this.randomness=t[u]);const r=await chrome.storage.session.get(m);r&&r[m]&&(this.jwtToken=r[m],this.decodedJwt=w(this.jwtToken),this.zkLoginState.userInfo=this.decodedJwt);const s=await chrome.storage.local.get(E);s&&s[E]&&(this.userSalt=s[E]);const a=await chrome.storage.local.get(k);a&&a[k]&&(this.maxEpoch=Number(a[k]));const g=await chrome.storage.local.get(L);g&&g[L]&&(this.userAddress=g[L],this.zkLoginState.userAddress=this.userAddress),this.zkLoginState.isLoggedIn=!!(this.userAddress&&this.jwtToken),this.zkLoginState.jwtToken=this.jwtToken,console.log("ZkLogin state loaded:",this.zkLoginState.isLoggedIn?"Logged in":"Not logged in")}catch(e){console.error("Error loading zkLogin state:",e)}}async saveCredentials(){try{await chrome.storage.local.set({grandWardenCredentials:this.credentials}),console.log(`Saved ${this.credentials.length} credentials to storage`)}catch(e){console.error("Failed to save credentials to storage:",e)}}async checkForLoginPage(e,t){try{const r=new URL(t).hostname,s=this.getCredentialsForDomain(r);s.length>0?(chrome.action.setBadgeText({tabId:e,text:s.length.toString()}),chrome.action.setBadgeBackgroundColor({tabId:e,color:"#3b82f6"}),chrome.action.setTitle({tabId:e,title:`Grand Warden - ${s.length} saved credential${s.length>1?"s":""} for ${r}`})):(chrome.action.setBadgeText({tabId:e,text:""}),chrome.action.setTitle({tabId:e,title:"Grand Warden - Secure Password Manager"}))}catch(r){console.error("Error checking login page:",r)}}async notifyContentScripts(e,t){try{(await chrome.tabs.query({active:!0})).forEach(s=>{s.id&&chrome.tabs.sendMessage(s.id,{type:e,data:t}).catch(()=>{})})}catch(r){console.error("Error notifying content scripts:",r)}}async openPopupWithContext(e,t){try{await chrome.storage.local.set({popupContext:{domain:e,url:t,timestamp:Date.now()}}),console.log(`Context set for popup: ${e}`)}catch(r){console.error("Error setting popup context:",r)}}async prepareForLogin(){try{if(console.log("Background: Starting prepareForLogin"),this.ephemeralKeyPair)console.log("Background: Using existing ephemeral key pair");else{console.log("Background: Generating ephemeral key pair"),this.ephemeralKeyPair=f.generate();const e={[h]:this.ephemeralKeyPair.export().privateKey};await chrome.storage.session.set(e),console.log("Background: Ephemeral key pair stored in session")}return console.log("Background: Setting max epoch manually"),this.maxEpoch=1e3,await chrome.storage.local.set({[k]:String(this.maxEpoch)}),console.log("Background: Max epoch set to",this.maxEpoch),console.log("Background: Generating randomness"),this.randomness=_(),await chrome.storage.session.set({[u]:this.randomness}),console.log("Background: Randomness generated and stored"),console.log("Background: Generating nonce"),this.nonce=N(this.ephemeralKeyPair.getPublicKey(),this.maxEpoch,this.randomness),console.log("Background: Nonce generated:",this.nonce),this.nonce}catch(e){throw console.error("Background: Error preparing for login:",e),e}}async initiateGoogleAuth(){if(console.log("Background: initiateGoogleAuth called"),!this.nonce){console.log("Background: No nonce found, generating one...");try{await this.prepareForLogin(),console.log("Background: Nonce generated:",this.nonce)}catch(e){throw console.error("Background: Failed to generate nonce:",e),e}}return new Promise((e,t)=>{try{const r=`https://accounts.google.com/o/oauth2/auth?client_id=${y}&response_type=id_token&redirect_uri=${encodeURIComponent(G)}&scope=openid email profile&nonce=${this.nonce}`;console.log("Background: Using auth URL:",r),chrome.identity.launchWebAuthFlow({url:r,interactive:!0},s=>{if(chrome.runtime.lastError){const a=chrome.runtime.lastError;console.error("Background: Auth flow error:",a),t(a);return}if(!s){const a=new Error("No response URL returned from auth flow");console.error("Background:",a),t(a);return}console.log("Background: Got response URL:",s);try{const a=s.split("#")[1];if(!a){const l=new Error("No URL hash in response");console.error("Background:",l),t(l);return}const c=new URLSearchParams(a).get("id_token");if(!c){const l=new Error("No ID token in response");console.error("Background:",l),t(l);return}console.log("Background: Successfully extracted ID token"),this.jwtToken=c,this.decodedJwt=w(c),chrome.storage.session.set({[m]:c}),this.zkLoginState.isLoggedIn=!0,this.zkLoginState.jwtToken=c,this.zkLoginState.userInfo=this.decodedJwt,e(c)}catch(a){console.error("Background: Error processing auth response:",a),t(a)}})}catch(r){console.error("Background: Fatal error in initiateGoogleAuth:",r),t(r)}})}async getUserSalt(){if(this.userSalt)return this.userSalt;const e=_();return await chrome.storage.local.set({[E]:e}),this.userSalt=e,e}async generateSuiAddress(){if(!this.jwtToken||!this.userSalt)throw new Error("JWT token or user salt not available");const e=P(this.jwtToken,this.userSalt);return this.userAddress=e,await chrome.storage.local.set({[L]:e}),this.zkLoginState.userAddress=e,e}async getZkProof(){if(!this.jwtToken||!this.userSalt||!this.maxEpoch||!this.randomness)throw new Error("Missing required data for ZK proof");if(!this.ephemeralKeyPair)throw new Error("Ephemeral key pair not available");this.extendedEphemeralPublicKey=K(this.ephemeralKeyPair.getPublicKey());try{const e=await C.post(D,{jwt:this.jwtToken,extendedEphemeralPublicKey:this.extendedEphemeralPublicKey,maxEpoch:this.maxEpoch,jwtRandomness:this.randomness,salt:this.userSalt,keyClaimName:"sub"},{headers:{"Content-Type":"application/json"}});return this.zkProofData=e.data,this.zkLoginState.isLoggedIn=!0,this.zkProofData}catch(e){throw console.error("Error getting ZK proof:",e),e}}async resetZkLoginState(){try{await chrome.storage.session.remove([h,u,m]),this.ephemeralKeyPair=void 0,this.randomness="",this.nonce="",this.jwtToken="",this.decodedJwt=void 0,this.zkProofData=void 0,this.extendedEphemeralPublicKey="",this.zkLoginState={isLoggedIn:!1},console.log("zkLogin state reset")}catch(e){throw console.error("Error resetting zkLogin state:",e),e}}async resetEverything(){await this.resetZkLoginState();try{await chrome.storage.local.remove([E,k,L]),this.userSalt=void 0,this.maxEpoch=0,this.userAddress="",console.log("All zkLogin data reset")}catch(e){throw console.error("Error resetting all zkLogin data:",e),e}}}new v;chrome.runtime.onSuspend.addListener(()=>{console.log("Grand Warden background service worker suspending")});
