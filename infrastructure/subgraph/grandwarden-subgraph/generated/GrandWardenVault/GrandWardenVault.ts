// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.

import {
  ethereum,
  JSONValue,
  TypedMap,
  Entity,
  Bytes,
  Address,
  BigInt,
} from "@graphprotocol/graph-ts";

export class AccessGranted extends ethereum.Event {
  get params(): AccessGranted__Params {
    return new AccessGranted__Params(this);
  }
}

export class AccessGranted__Params {
  _event: AccessGranted;

  constructor(event: AccessGranted) {
    this._event = event;
  }

  get user(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get resourceId(): Bytes {
    return this._event.parameters[1].value.toBytes();
  }

  get grantee(): Address {
    return this._event.parameters[2].value.toAddress();
  }
}

export class AccessRevoked extends ethereum.Event {
  get params(): AccessRevoked__Params {
    return new AccessRevoked__Params(this);
  }
}

export class AccessRevoked__Params {
  _event: AccessRevoked;

  constructor(event: AccessRevoked) {
    this._event = event;
  }

  get user(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get resourceId(): Bytes {
    return this._event.parameters[1].value.toBytes();
  }

  get revokee(): Address {
    return this._event.parameters[2].value.toAddress();
  }
}

export class AtomicUpdateCompleted extends ethereum.Event {
  get params(): AtomicUpdateCompleted__Params {
    return new AtomicUpdateCompleted__Params(this);
  }
}

export class AtomicUpdateCompleted__Params {
  _event: AtomicUpdateCompleted;

  constructor(event: AtomicUpdateCompleted) {
    this._event = event;
  }

  get user(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get vaultId(): Bytes {
    return this._event.parameters[1].value.toBytes();
  }

  get suiTxHash(): Bytes {
    return this._event.parameters[2].value.toBytes();
  }
}

export class BreachAlert extends ethereum.Event {
  get params(): BreachAlert__Params {
    return new BreachAlert__Params(this);
  }
}

export class BreachAlert__Params {
  _event: BreachAlert;

  constructor(event: BreachAlert) {
    this._event = event;
  }

  get user(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get severity(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }

  get message(): string {
    return this._event.parameters[2].value.toString();
  }
}

export class ChainBalanceUpdated extends ethereum.Event {
  get params(): ChainBalanceUpdated__Params {
    return new ChainBalanceUpdated__Params(this);
  }
}

export class ChainBalanceUpdated__Params {
  _event: ChainBalanceUpdated;

  constructor(event: ChainBalanceUpdated) {
    this._event = event;
  }

  get user(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get walletId(): Bytes {
    return this._event.parameters[1].value.toBytes();
  }

  get chainType(): i32 {
    return this._event.parameters[2].value.toI32();
  }

  get newBalance(): BigInt {
    return this._event.parameters[3].value.toBigInt();
  }
}

export class CredentialAdded extends ethereum.Event {
  get params(): CredentialAdded__Params {
    return new CredentialAdded__Params(this);
  }
}

export class CredentialAdded__Params {
  _event: CredentialAdded;

  constructor(event: CredentialAdded) {
    this._event = event;
  }

  get user(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get vaultId(): Bytes {
    return this._event.parameters[1].value.toBytes();
  }

  get domain(): string {
    return this._event.parameters[2].value.toString();
  }

  get timestamp(): BigInt {
    return this._event.parameters[3].value.toBigInt();
  }
}

export class CrossChainOperationCompleted extends ethereum.Event {
  get params(): CrossChainOperationCompleted__Params {
    return new CrossChainOperationCompleted__Params(this);
  }
}

export class CrossChainOperationCompleted__Params {
  _event: CrossChainOperationCompleted;

  constructor(event: CrossChainOperationCompleted) {
    this._event = event;
  }

  get user(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get operationId(): Bytes {
    return this._event.parameters[1].value.toBytes();
  }

  get success(): boolean {
    return this._event.parameters[2].value.toBoolean();
  }
}

export class CrossChainOperationStarted extends ethereum.Event {
  get params(): CrossChainOperationStarted__Params {
    return new CrossChainOperationStarted__Params(this);
  }
}

export class CrossChainOperationStarted__Params {
  _event: CrossChainOperationStarted;

  constructor(event: CrossChainOperationStarted) {
    this._event = event;
  }

  get user(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get operationId(): Bytes {
    return this._event.parameters[1].value.toBytes();
  }

  get sourceChain(): i32 {
    return this._event.parameters[2].value.toI32();
  }

  get targetChain(): i32 {
    return this._event.parameters[3].value.toI32();
  }
}

export class DeviceAuthorized extends ethereum.Event {
  get params(): DeviceAuthorized__Params {
    return new DeviceAuthorized__Params(this);
  }
}

export class DeviceAuthorized__Params {
  _event: DeviceAuthorized;

  constructor(event: DeviceAuthorized) {
    this._event = event;
  }

  get user(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get deviceId(): Bytes {
    return this._event.parameters[1].value.toBytes();
  }

  get deviceAddress(): Address {
    return this._event.parameters[2].value.toAddress();
  }
}

export class DeviceRegistered extends ethereum.Event {
  get params(): DeviceRegistered__Params {
    return new DeviceRegistered__Params(this);
  }
}

export class DeviceRegistered__Params {
  _event: DeviceRegistered;

  constructor(event: DeviceRegistered) {
    this._event = event;
  }

  get user(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get deviceId(): Bytes {
    return this._event.parameters[1].value.toBytes();
  }

  get deviceName(): string {
    return this._event.parameters[2].value.toString();
  }
}

export class DeviceRevoked extends ethereum.Event {
  get params(): DeviceRevoked__Params {
    return new DeviceRevoked__Params(this);
  }
}

export class DeviceRevoked__Params {
  _event: DeviceRevoked;

  constructor(event: DeviceRevoked) {
    this._event = event;
  }

  get user(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get deviceId(): Bytes {
    return this._event.parameters[1].value.toBytes();
  }

  get timestamp(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }
}

export class EmergencyShutdown extends ethereum.Event {
  get params(): EmergencyShutdown__Params {
    return new EmergencyShutdown__Params(this);
  }
}

export class EmergencyShutdown__Params {
  _event: EmergencyShutdown;

  constructor(event: EmergencyShutdown) {
    this._event = event;
  }

  get admin(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get reason(): string {
    return this._event.parameters[1].value.toString();
  }

  get timestamp(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }
}

export class GenericVaultEvent extends ethereum.Event {
  get params(): GenericVaultEvent__Params {
    return new GenericVaultEvent__Params(this);
  }
}

export class GenericVaultEvent__Params {
  _event: GenericVaultEvent;

  constructor(event: GenericVaultEvent) {
    this._event = event;
  }

  get user(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get eventType(): i32 {
    return this._event.parameters[1].value.toI32();
  }

  get data(): Bytes {
    return this._event.parameters[2].value.toBytes();
  }
}

export class SecurityAlert extends ethereum.Event {
  get params(): SecurityAlert__Params {
    return new SecurityAlert__Params(this);
  }
}

export class SecurityAlert__Params {
  _event: SecurityAlert;

  constructor(event: SecurityAlert) {
    this._event = event;
  }

  get user(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get alertType(): i32 {
    return this._event.parameters[1].value.toI32();
  }

  get description(): string {
    return this._event.parameters[2].value.toString();
  }

  get timestamp(): BigInt {
    return this._event.parameters[3].value.toBigInt();
  }
}

export class SystemHealthCheck extends ethereum.Event {
  get params(): SystemHealthCheck__Params {
    return new SystemHealthCheck__Params(this);
  }
}

export class SystemHealthCheck__Params {
  _event: SystemHealthCheck;

  constructor(event: SystemHealthCheck) {
    this._event = event;
  }

  get timestamp(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }

  get healthy(): boolean {
    return this._event.parameters[1].value.toBoolean();
  }

  get details(): string {
    return this._event.parameters[2].value.toString();
  }
}

export class SystemRecovery extends ethereum.Event {
  get params(): SystemRecovery__Params {
    return new SystemRecovery__Params(this);
  }
}

export class SystemRecovery__Params {
  _event: SystemRecovery;

  constructor(event: SystemRecovery) {
    this._event = event;
  }

  get admin(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get timestamp(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }
}

export class TransactionSigned extends ethereum.Event {
  get params(): TransactionSigned__Params {
    return new TransactionSigned__Params(this);
  }
}

export class TransactionSigned__Params {
  _event: TransactionSigned;

  constructor(event: TransactionSigned) {
    this._event = event;
  }

  get user(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get walletId(): Bytes {
    return this._event.parameters[1].value.toBytes();
  }

  get txHash(): Bytes {
    return this._event.parameters[2].value.toBytes();
  }

  get chainType(): i32 {
    return this._event.parameters[3].value.toI32();
  }
}

export class UnauthorizedAccess extends ethereum.Event {
  get params(): UnauthorizedAccess__Params {
    return new UnauthorizedAccess__Params(this);
  }
}

export class UnauthorizedAccess__Params {
  _event: UnauthorizedAccess;

  constructor(event: UnauthorizedAccess) {
    this._event = event;
  }

  get user(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get unauthorized(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get resource(): string {
    return this._event.parameters[2].value.toString();
  }
}

export class VaultAccessed extends ethereum.Event {
  get params(): VaultAccessed__Params {
    return new VaultAccessed__Params(this);
  }
}

export class VaultAccessed__Params {
  _event: VaultAccessed;

  constructor(event: VaultAccessed) {
    this._event = event;
  }

  get user(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get vaultId(): Bytes {
    return this._event.parameters[1].value.toBytes();
  }

  get timestamp(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }
}

export class VaultBlobUpdated extends ethereum.Event {
  get params(): VaultBlobUpdated__Params {
    return new VaultBlobUpdated__Params(this);
  }
}

export class VaultBlobUpdated__Params {
  _event: VaultBlobUpdated;

  constructor(event: VaultBlobUpdated) {
    this._event = event;
  }

  get user(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get vaultId(): Bytes {
    return this._event.parameters[1].value.toBytes();
  }

  get newCID(): string {
    return this._event.parameters[2].value.toString();
  }

  get suiTxHash(): Bytes {
    return this._event.parameters[3].value.toBytes();
  }
}

export class VaultCreated extends ethereum.Event {
  get params(): VaultCreated__Params {
    return new VaultCreated__Params(this);
  }
}

export class VaultCreated__Params {
  _event: VaultCreated;

  constructor(event: VaultCreated) {
    this._event = event;
  }

  get user(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get vaultId(): Bytes {
    return this._event.parameters[1].value.toBytes();
  }

  get timestamp(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }
}

export class VaultEvent extends ethereum.Event {
  get params(): VaultEvent__Params {
    return new VaultEvent__Params(this);
  }
}

export class VaultEvent__Params {
  _event: VaultEvent;

  constructor(event: VaultEvent) {
    this._event = event;
  }

  get user(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get flowType(): i32 {
    return this._event.parameters[1].value.toI32();
  }

  get step(): i32 {
    return this._event.parameters[2].value.toI32();
  }

  get success(): boolean {
    return this._event.parameters[3].value.toBoolean();
  }

  get data(): Bytes {
    return this._event.parameters[4].value.toBytes();
  }
}

export class VaultUpdated extends ethereum.Event {
  get params(): VaultUpdated__Params {
    return new VaultUpdated__Params(this);
  }
}

export class VaultUpdated__Params {
  _event: VaultUpdated;

  constructor(event: VaultUpdated) {
    this._event = event;
  }

  get user(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get vaultId(): Bytes {
    return this._event.parameters[1].value.toBytes();
  }

  get timestamp(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }
}

export class GrandWardenVault__atomicVaultUpdateResult {
  value0: string;
  value1: Bytes;

  constructor(value0: string, value1: Bytes) {
    this.value0 = value0;
    this.value1 = value1;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    let map = new TypedMap<string, ethereum.Value>();
    map.set("value0", ethereum.Value.fromString(this.value0));
    map.set("value1", ethereum.Value.fromFixedBytes(this.value1));
    return map;
  }

  getNewCID(): string {
    return this.value0;
  }

  getSuiTxHash(): Bytes {
    return this.value1;
  }
}

export class GrandWardenVault__checkPasswordSecurityResult {
  value0: i32;
  value1: Array<string>;

  constructor(value0: i32, value1: Array<string>) {
    this.value0 = value0;
    this.value1 = value1;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    let map = new TypedMap<string, ethereum.Value>();
    map.set(
      "value0",
      ethereum.Value.fromUnsignedBigInt(BigInt.fromI32(this.value0)),
    );
    map.set("value1", ethereum.Value.fromStringArray(this.value1));
    return map;
  }

  getScore(): i32 {
    return this.value0;
  }

  getWarnings(): Array<string> {
    return this.value1;
  }
}

export class GrandWardenVault__getCredentialResult {
  value0: string;
  value1: string;

  constructor(value0: string, value1: string) {
    this.value0 = value0;
    this.value1 = value1;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    let map = new TypedMap<string, ethereum.Value>();
    map.set("value0", ethereum.Value.fromString(this.value0));
    map.set("value1", ethereum.Value.fromString(this.value1));
    return map;
  }

  getUsername(): string {
    return this.value0;
  }

  getPassword(): string {
    return this.value1;
  }
}

export class GrandWardenVault extends ethereum.SmartContract {
  static bind(address: Address): GrandWardenVault {
    return new GrandWardenVault("GrandWardenVault", address);
  }

  atomicVaultUpdate(
    vaultId: Bytes,
    newData: Bytes,
  ): GrandWardenVault__atomicVaultUpdateResult {
    let result = super.call(
      "atomicVaultUpdate",
      "atomicVaultUpdate(bytes32,bytes):(string,bytes32)",
      [
        ethereum.Value.fromFixedBytes(vaultId),
        ethereum.Value.fromBytes(newData),
      ],
    );

    return new GrandWardenVault__atomicVaultUpdateResult(
      result[0].toString(),
      result[1].toBytes(),
    );
  }

  try_atomicVaultUpdate(
    vaultId: Bytes,
    newData: Bytes,
  ): ethereum.CallResult<GrandWardenVault__atomicVaultUpdateResult> {
    let result = super.tryCall(
      "atomicVaultUpdate",
      "atomicVaultUpdate(bytes32,bytes):(string,bytes32)",
      [
        ethereum.Value.fromFixedBytes(vaultId),
        ethereum.Value.fromBytes(newData),
      ],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      new GrandWardenVault__atomicVaultUpdateResult(
        value[0].toString(),
        value[1].toBytes(),
      ),
    );
  }

  checkPasswordSecurity(
    password: string,
  ): GrandWardenVault__checkPasswordSecurityResult {
    let result = super.call(
      "checkPasswordSecurity",
      "checkPasswordSecurity(string):(uint8,string[])",
      [ethereum.Value.fromString(password)],
    );

    return new GrandWardenVault__checkPasswordSecurityResult(
      result[0].toI32(),
      result[1].toStringArray(),
    );
  }

  try_checkPasswordSecurity(
    password: string,
  ): ethereum.CallResult<GrandWardenVault__checkPasswordSecurityResult> {
    let result = super.tryCall(
      "checkPasswordSecurity",
      "checkPasswordSecurity(string):(uint8,string[])",
      [ethereum.Value.fromString(password)],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      new GrandWardenVault__checkPasswordSecurityResult(
        value[0].toI32(),
        value[1].toStringArray(),
      ),
    );
  }

  createVault(vaultData: Bytes): Bytes {
    let result = super.call("createVault", "createVault(bytes):(bytes32)", [
      ethereum.Value.fromBytes(vaultData),
    ]);

    return result[0].toBytes();
  }

  try_createVault(vaultData: Bytes): ethereum.CallResult<Bytes> {
    let result = super.tryCall("createVault", "createVault(bytes):(bytes32)", [
      ethereum.Value.fromBytes(vaultData),
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBytes());
  }

  getCredential(
    vaultId: Bytes,
    domain: string,
  ): GrandWardenVault__getCredentialResult {
    let result = super.call(
      "getCredential",
      "getCredential(bytes32,string):(string,string)",
      [
        ethereum.Value.fromFixedBytes(vaultId),
        ethereum.Value.fromString(domain),
      ],
    );

    return new GrandWardenVault__getCredentialResult(
      result[0].toString(),
      result[1].toString(),
    );
  }

  try_getCredential(
    vaultId: Bytes,
    domain: string,
  ): ethereum.CallResult<GrandWardenVault__getCredentialResult> {
    let result = super.tryCall(
      "getCredential",
      "getCredential(bytes32,string):(string,string)",
      [
        ethereum.Value.fromFixedBytes(vaultId),
        ethereum.Value.fromString(domain),
      ],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      new GrandWardenVault__getCredentialResult(
        value[0].toString(),
        value[1].toString(),
      ),
    );
  }

  getUserVaults(user: Address): Array<Bytes> {
    let result = super.call(
      "getUserVaults",
      "getUserVaults(address):(bytes32[])",
      [ethereum.Value.fromAddress(user)],
    );

    return result[0].toBytesArray();
  }

  try_getUserVaults(user: Address): ethereum.CallResult<Array<Bytes>> {
    let result = super.tryCall(
      "getUserVaults",
      "getUserVaults(address):(bytes32[])",
      [ethereum.Value.fromAddress(user)],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBytesArray());
  }

  getVault(vaultId: Bytes): Bytes {
    let result = super.call("getVault", "getVault(bytes32):(bytes)", [
      ethereum.Value.fromFixedBytes(vaultId),
    ]);

    return result[0].toBytes();
  }

  try_getVault(vaultId: Bytes): ethereum.CallResult<Bytes> {
    let result = super.tryCall("getVault", "getVault(bytes32):(bytes)", [
      ethereum.Value.fromFixedBytes(vaultId),
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBytes());
  }

  getVaultDomains(vaultId: Bytes): Array<string> {
    let result = super.call(
      "getVaultDomains",
      "getVaultDomains(bytes32):(string[])",
      [ethereum.Value.fromFixedBytes(vaultId)],
    );

    return result[0].toStringArray();
  }

  try_getVaultDomains(vaultId: Bytes): ethereum.CallResult<Array<string>> {
    let result = super.tryCall(
      "getVaultDomains",
      "getVaultDomains(bytes32):(string[])",
      [ethereum.Value.fromFixedBytes(vaultId)],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toStringArray());
  }

  isPaused(): boolean {
    let result = super.call("isPaused", "isPaused():(bool)", []);

    return result[0].toBoolean();
  }

  try_isPaused(): ethereum.CallResult<boolean> {
    let result = super.tryCall("isPaused", "isPaused():(bool)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  owner(): Address {
    let result = super.call("owner", "owner():(address)", []);

    return result[0].toAddress();
  }

  try_owner(): ethereum.CallResult<Address> {
    let result = super.tryCall("owner", "owner():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  updateVaultBlob(vaultId: Bytes, newEncryptedBlob: Bytes): string {
    let result = super.call(
      "updateVaultBlob",
      "updateVaultBlob(bytes32,bytes):(string)",
      [
        ethereum.Value.fromFixedBytes(vaultId),
        ethereum.Value.fromBytes(newEncryptedBlob),
      ],
    );

    return result[0].toString();
  }

  try_updateVaultBlob(
    vaultId: Bytes,
    newEncryptedBlob: Bytes,
  ): ethereum.CallResult<string> {
    let result = super.tryCall(
      "updateVaultBlob",
      "updateVaultBlob(bytes32,bytes):(string)",
      [
        ethereum.Value.fromFixedBytes(vaultId),
        ethereum.Value.fromBytes(newEncryptedBlob),
      ],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toString());
  }

  vaultExists(user: Address, vaultId: Bytes): boolean {
    let result = super.call(
      "vaultExists",
      "vaultExists(address,bytes32):(bool)",
      [
        ethereum.Value.fromAddress(user),
        ethereum.Value.fromFixedBytes(vaultId),
      ],
    );

    return result[0].toBoolean();
  }

  try_vaultExists(user: Address, vaultId: Bytes): ethereum.CallResult<boolean> {
    let result = super.tryCall(
      "vaultExists",
      "vaultExists(address,bytes32):(bool)",
      [
        ethereum.Value.fromAddress(user),
        ethereum.Value.fromFixedBytes(vaultId),
      ],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }
}

export class ConstructorCall extends ethereum.Call {
  get inputs(): ConstructorCall__Inputs {
    return new ConstructorCall__Inputs(this);
  }

  get outputs(): ConstructorCall__Outputs {
    return new ConstructorCall__Outputs(this);
  }
}

export class ConstructorCall__Inputs {
  _call: ConstructorCall;

  constructor(call: ConstructorCall) {
    this._call = call;
  }
}

export class ConstructorCall__Outputs {
  _call: ConstructorCall;

  constructor(call: ConstructorCall) {
    this._call = call;
  }
}

export class AddCredentialCall extends ethereum.Call {
  get inputs(): AddCredentialCall__Inputs {
    return new AddCredentialCall__Inputs(this);
  }

  get outputs(): AddCredentialCall__Outputs {
    return new AddCredentialCall__Outputs(this);
  }
}

export class AddCredentialCall__Inputs {
  _call: AddCredentialCall;

  constructor(call: AddCredentialCall) {
    this._call = call;
  }

  get vaultId(): Bytes {
    return this._call.inputValues[0].value.toBytes();
  }

  get domain(): string {
    return this._call.inputValues[1].value.toString();
  }

  get username(): string {
    return this._call.inputValues[2].value.toString();
  }

  get encryptedPassword(): Bytes {
    return this._call.inputValues[3].value.toBytes();
  }
}

export class AddCredentialCall__Outputs {
  _call: AddCredentialCall;

  constructor(call: AddCredentialCall) {
    this._call = call;
  }
}

export class AtomicVaultUpdateCall extends ethereum.Call {
  get inputs(): AtomicVaultUpdateCall__Inputs {
    return new AtomicVaultUpdateCall__Inputs(this);
  }

  get outputs(): AtomicVaultUpdateCall__Outputs {
    return new AtomicVaultUpdateCall__Outputs(this);
  }
}

export class AtomicVaultUpdateCall__Inputs {
  _call: AtomicVaultUpdateCall;

  constructor(call: AtomicVaultUpdateCall) {
    this._call = call;
  }

  get vaultId(): Bytes {
    return this._call.inputValues[0].value.toBytes();
  }

  get newData(): Bytes {
    return this._call.inputValues[1].value.toBytes();
  }
}

export class AtomicVaultUpdateCall__Outputs {
  _call: AtomicVaultUpdateCall;

  constructor(call: AtomicVaultUpdateCall) {
    this._call = call;
  }

  get newCID(): string {
    return this._call.outputValues[0].value.toString();
  }

  get suiTxHash(): Bytes {
    return this._call.outputValues[1].value.toBytes();
  }
}

export class CreateVaultCall extends ethereum.Call {
  get inputs(): CreateVaultCall__Inputs {
    return new CreateVaultCall__Inputs(this);
  }

  get outputs(): CreateVaultCall__Outputs {
    return new CreateVaultCall__Outputs(this);
  }
}

export class CreateVaultCall__Inputs {
  _call: CreateVaultCall;

  constructor(call: CreateVaultCall) {
    this._call = call;
  }

  get vaultData(): Bytes {
    return this._call.inputValues[0].value.toBytes();
  }
}

export class CreateVaultCall__Outputs {
  _call: CreateVaultCall;

  constructor(call: CreateVaultCall) {
    this._call = call;
  }

  get vaultId(): Bytes {
    return this._call.outputValues[0].value.toBytes();
  }
}

export class EmergencyShutdownCall extends ethereum.Call {
  get inputs(): EmergencyShutdownCall__Inputs {
    return new EmergencyShutdownCall__Inputs(this);
  }

  get outputs(): EmergencyShutdownCall__Outputs {
    return new EmergencyShutdownCall__Outputs(this);
  }
}

export class EmergencyShutdownCall__Inputs {
  _call: EmergencyShutdownCall;

  constructor(call: EmergencyShutdownCall) {
    this._call = call;
  }

  get reason(): string {
    return this._call.inputValues[0].value.toString();
  }
}

export class EmergencyShutdownCall__Outputs {
  _call: EmergencyShutdownCall;

  constructor(call: EmergencyShutdownCall) {
    this._call = call;
  }
}

export class EmitUserFlowEventCall extends ethereum.Call {
  get inputs(): EmitUserFlowEventCall__Inputs {
    return new EmitUserFlowEventCall__Inputs(this);
  }

  get outputs(): EmitUserFlowEventCall__Outputs {
    return new EmitUserFlowEventCall__Outputs(this);
  }
}

export class EmitUserFlowEventCall__Inputs {
  _call: EmitUserFlowEventCall;

  constructor(call: EmitUserFlowEventCall) {
    this._call = call;
  }

  get user(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get flowType(): i32 {
    return this._call.inputValues[1].value.toI32();
  }

  get step(): i32 {
    return this._call.inputValues[2].value.toI32();
  }

  get success(): boolean {
    return this._call.inputValues[3].value.toBoolean();
  }

  get data(): Bytes {
    return this._call.inputValues[4].value.toBytes();
  }
}

export class EmitUserFlowEventCall__Outputs {
  _call: EmitUserFlowEventCall;

  constructor(call: EmitUserFlowEventCall) {
    this._call = call;
  }
}

export class EmitVaultEventCall extends ethereum.Call {
  get inputs(): EmitVaultEventCall__Inputs {
    return new EmitVaultEventCall__Inputs(this);
  }

  get outputs(): EmitVaultEventCall__Outputs {
    return new EmitVaultEventCall__Outputs(this);
  }
}

export class EmitVaultEventCall__Inputs {
  _call: EmitVaultEventCall;

  constructor(call: EmitVaultEventCall) {
    this._call = call;
  }

  get user(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get eventType(): i32 {
    return this._call.inputValues[1].value.toI32();
  }

  get data(): Bytes {
    return this._call.inputValues[2].value.toBytes();
  }
}

export class EmitVaultEventCall__Outputs {
  _call: EmitVaultEventCall;

  constructor(call: EmitVaultEventCall) {
    this._call = call;
  }
}

export class PauseCall extends ethereum.Call {
  get inputs(): PauseCall__Inputs {
    return new PauseCall__Inputs(this);
  }

  get outputs(): PauseCall__Outputs {
    return new PauseCall__Outputs(this);
  }
}

export class PauseCall__Inputs {
  _call: PauseCall;

  constructor(call: PauseCall) {
    this._call = call;
  }
}

export class PauseCall__Outputs {
  _call: PauseCall;

  constructor(call: PauseCall) {
    this._call = call;
  }
}

export class UnpauseCall extends ethereum.Call {
  get inputs(): UnpauseCall__Inputs {
    return new UnpauseCall__Inputs(this);
  }

  get outputs(): UnpauseCall__Outputs {
    return new UnpauseCall__Outputs(this);
  }
}

export class UnpauseCall__Inputs {
  _call: UnpauseCall;

  constructor(call: UnpauseCall) {
    this._call = call;
  }
}

export class UnpauseCall__Outputs {
  _call: UnpauseCall;

  constructor(call: UnpauseCall) {
    this._call = call;
  }
}

export class UpdateVaultCall extends ethereum.Call {
  get inputs(): UpdateVaultCall__Inputs {
    return new UpdateVaultCall__Inputs(this);
  }

  get outputs(): UpdateVaultCall__Outputs {
    return new UpdateVaultCall__Outputs(this);
  }
}

export class UpdateVaultCall__Inputs {
  _call: UpdateVaultCall;

  constructor(call: UpdateVaultCall) {
    this._call = call;
  }

  get vaultId(): Bytes {
    return this._call.inputValues[0].value.toBytes();
  }

  get newVaultData(): Bytes {
    return this._call.inputValues[1].value.toBytes();
  }
}

export class UpdateVaultCall__Outputs {
  _call: UpdateVaultCall;

  constructor(call: UpdateVaultCall) {
    this._call = call;
  }
}

export class UpdateVaultBlobCall extends ethereum.Call {
  get inputs(): UpdateVaultBlobCall__Inputs {
    return new UpdateVaultBlobCall__Inputs(this);
  }

  get outputs(): UpdateVaultBlobCall__Outputs {
    return new UpdateVaultBlobCall__Outputs(this);
  }
}

export class UpdateVaultBlobCall__Inputs {
  _call: UpdateVaultBlobCall;

  constructor(call: UpdateVaultBlobCall) {
    this._call = call;
  }

  get vaultId(): Bytes {
    return this._call.inputValues[0].value.toBytes();
  }

  get newEncryptedBlob(): Bytes {
    return this._call.inputValues[1].value.toBytes();
  }
}

export class UpdateVaultBlobCall__Outputs {
  _call: UpdateVaultBlobCall;

  constructor(call: UpdateVaultBlobCall) {
    this._call = call;
  }

  get newCID(): string {
    return this._call.outputValues[0].value.toString();
  }
}
