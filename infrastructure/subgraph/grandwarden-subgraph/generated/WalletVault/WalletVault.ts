// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.

import {
  ethereum,
  JSONValue,
  TypedMap,
  Entity,
  Bytes,
  Address,
  BigInt,
} from "@graphprotocol/graph-ts";

export class AccessGranted extends ethereum.Event {
  get params(): AccessGranted__Params {
    return new AccessGranted__Params(this);
  }
}

export class AccessGranted__Params {
  _event: AccessGranted;

  constructor(event: AccessGranted) {
    this._event = event;
  }

  get user(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get resourceId(): Bytes {
    return this._event.parameters[1].value.toBytes();
  }

  get grantee(): Address {
    return this._event.parameters[2].value.toAddress();
  }
}

export class AccessRevoked extends ethereum.Event {
  get params(): AccessRevoked__Params {
    return new AccessRevoked__Params(this);
  }
}

export class AccessRevoked__Params {
  _event: AccessRevoked;

  constructor(event: AccessRevoked) {
    this._event = event;
  }

  get user(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get resourceId(): Bytes {
    return this._event.parameters[1].value.toBytes();
  }

  get revokee(): Address {
    return this._event.parameters[2].value.toAddress();
  }
}

export class BalanceFetched extends ethereum.Event {
  get params(): BalanceFetched__Params {
    return new BalanceFetched__Params(this);
  }
}

export class BalanceFetched__Params {
  _event: BalanceFetched;

  constructor(event: BalanceFetched) {
    this._event = event;
  }

  get wallet(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get chainType(): i32 {
    return this._event.parameters[1].value.toI32();
  }

  get balance(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }
}

export class BalancesFetched extends ethereum.Event {
  get params(): BalancesFetched__Params {
    return new BalancesFetched__Params(this);
  }
}

export class BalancesFetched__Params {
  _event: BalancesFetched;

  constructor(event: BalancesFetched) {
    this._event = event;
  }

  get user(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get walletId(): Bytes {
    return this._event.parameters[1].value.toBytes();
  }

  get totalValue(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }
}

export class ChainBalanceUpdated extends ethereum.Event {
  get params(): ChainBalanceUpdated__Params {
    return new ChainBalanceUpdated__Params(this);
  }
}

export class ChainBalanceUpdated__Params {
  _event: ChainBalanceUpdated;

  constructor(event: ChainBalanceUpdated) {
    this._event = event;
  }

  get user(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get walletId(): Bytes {
    return this._event.parameters[1].value.toBytes();
  }

  get chainType(): i32 {
    return this._event.parameters[2].value.toI32();
  }

  get newBalance(): BigInt {
    return this._event.parameters[3].value.toBigInt();
  }
}

export class ChainConfigUpdated extends ethereum.Event {
  get params(): ChainConfigUpdated__Params {
    return new ChainConfigUpdated__Params(this);
  }
}

export class ChainConfigUpdated__Params {
  _event: ChainConfigUpdated;

  constructor(event: ChainConfigUpdated) {
    this._event = event;
  }

  get chainType(): i32 {
    return this._event.parameters[0].value.toI32();
  }

  get rpcUrl(): string {
    return this._event.parameters[1].value.toString();
  }
}

export class CrossChainOperationCompleted extends ethereum.Event {
  get params(): CrossChainOperationCompleted__Params {
    return new CrossChainOperationCompleted__Params(this);
  }
}

export class CrossChainOperationCompleted__Params {
  _event: CrossChainOperationCompleted;

  constructor(event: CrossChainOperationCompleted) {
    this._event = event;
  }

  get user(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get operationId(): Bytes {
    return this._event.parameters[1].value.toBytes();
  }

  get success(): boolean {
    return this._event.parameters[2].value.toBoolean();
  }
}

export class CrossChainOperationStarted extends ethereum.Event {
  get params(): CrossChainOperationStarted__Params {
    return new CrossChainOperationStarted__Params(this);
  }
}

export class CrossChainOperationStarted__Params {
  _event: CrossChainOperationStarted;

  constructor(event: CrossChainOperationStarted) {
    this._event = event;
  }

  get user(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get operationId(): Bytes {
    return this._event.parameters[1].value.toBytes();
  }

  get sourceChain(): i32 {
    return this._event.parameters[2].value.toI32();
  }

  get targetChain(): i32 {
    return this._event.parameters[3].value.toI32();
  }
}

export class DeviceAuthorized extends ethereum.Event {
  get params(): DeviceAuthorized__Params {
    return new DeviceAuthorized__Params(this);
  }
}

export class DeviceAuthorized__Params {
  _event: DeviceAuthorized;

  constructor(event: DeviceAuthorized) {
    this._event = event;
  }

  get user(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get deviceId(): Bytes {
    return this._event.parameters[1].value.toBytes();
  }

  get deviceAddress(): Address {
    return this._event.parameters[2].value.toAddress();
  }
}

export class DeviceRegistered extends ethereum.Event {
  get params(): DeviceRegistered__Params {
    return new DeviceRegistered__Params(this);
  }
}

export class DeviceRegistered__Params {
  _event: DeviceRegistered;

  constructor(event: DeviceRegistered) {
    this._event = event;
  }

  get user(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get deviceId(): Bytes {
    return this._event.parameters[1].value.toBytes();
  }

  get deviceName(): string {
    return this._event.parameters[2].value.toString();
  }
}

export class DeviceRevoked extends ethereum.Event {
  get params(): DeviceRevoked__Params {
    return new DeviceRevoked__Params(this);
  }
}

export class DeviceRevoked__Params {
  _event: DeviceRevoked;

  constructor(event: DeviceRevoked) {
    this._event = event;
  }

  get user(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get deviceId(): Bytes {
    return this._event.parameters[1].value.toBytes();
  }

  get timestamp(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }
}

export class EmergencyShutdown extends ethereum.Event {
  get params(): EmergencyShutdown__Params {
    return new EmergencyShutdown__Params(this);
  }
}

export class EmergencyShutdown__Params {
  _event: EmergencyShutdown;

  constructor(event: EmergencyShutdown) {
    this._event = event;
  }

  get admin(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get reason(): string {
    return this._event.parameters[1].value.toString();
  }

  get timestamp(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }
}

export class GenericVaultEvent extends ethereum.Event {
  get params(): GenericVaultEvent__Params {
    return new GenericVaultEvent__Params(this);
  }
}

export class GenericVaultEvent__Params {
  _event: GenericVaultEvent;

  constructor(event: GenericVaultEvent) {
    this._event = event;
  }

  get user(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get eventType(): i32 {
    return this._event.parameters[1].value.toI32();
  }

  get data(): Bytes {
    return this._event.parameters[2].value.toBytes();
  }
}

export class SecurityAlert extends ethereum.Event {
  get params(): SecurityAlert__Params {
    return new SecurityAlert__Params(this);
  }
}

export class SecurityAlert__Params {
  _event: SecurityAlert;

  constructor(event: SecurityAlert) {
    this._event = event;
  }

  get user(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get alertType(): i32 {
    return this._event.parameters[1].value.toI32();
  }

  get description(): string {
    return this._event.parameters[2].value.toString();
  }

  get timestamp(): BigInt {
    return this._event.parameters[3].value.toBigInt();
  }
}

export class SystemHealthCheck extends ethereum.Event {
  get params(): SystemHealthCheck__Params {
    return new SystemHealthCheck__Params(this);
  }
}

export class SystemHealthCheck__Params {
  _event: SystemHealthCheck;

  constructor(event: SystemHealthCheck) {
    this._event = event;
  }

  get timestamp(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }

  get healthy(): boolean {
    return this._event.parameters[1].value.toBoolean();
  }

  get details(): string {
    return this._event.parameters[2].value.toString();
  }
}

export class SystemRecovery extends ethereum.Event {
  get params(): SystemRecovery__Params {
    return new SystemRecovery__Params(this);
  }
}

export class SystemRecovery__Params {
  _event: SystemRecovery;

  constructor(event: SystemRecovery) {
    this._event = event;
  }

  get admin(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get timestamp(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }
}

export class TransactionSigned extends ethereum.Event {
  get params(): TransactionSigned__Params {
    return new TransactionSigned__Params(this);
  }
}

export class TransactionSigned__Params {
  _event: TransactionSigned;

  constructor(event: TransactionSigned) {
    this._event = event;
  }

  get user(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get walletId(): Bytes {
    return this._event.parameters[1].value.toBytes();
  }

  get txHash(): Bytes {
    return this._event.parameters[2].value.toBytes();
  }

  get chainType(): i32 {
    return this._event.parameters[3].value.toI32();
  }
}

export class TransactionSigned1 extends ethereum.Event {
  get params(): TransactionSigned1__Params {
    return new TransactionSigned1__Params(this);
  }
}

export class TransactionSigned1__Params {
  _event: TransactionSigned1;

  constructor(event: TransactionSigned1) {
    this._event = event;
  }

  get user(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get walletId(): Bytes {
    return this._event.parameters[1].value.toBytes();
  }

  get txHash(): Bytes {
    return this._event.parameters[2].value.toBytes();
  }
}

export class UnauthorizedAccess extends ethereum.Event {
  get params(): UnauthorizedAccess__Params {
    return new UnauthorizedAccess__Params(this);
  }
}

export class UnauthorizedAccess__Params {
  _event: UnauthorizedAccess;

  constructor(event: UnauthorizedAccess) {
    this._event = event;
  }

  get user(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get unauthorized(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get resource(): string {
    return this._event.parameters[2].value.toString();
  }
}

export class UserFlowEvent extends ethereum.Event {
  get params(): UserFlowEvent__Params {
    return new UserFlowEvent__Params(this);
  }
}

export class UserFlowEvent__Params {
  _event: UserFlowEvent;

  constructor(event: UserFlowEvent) {
    this._event = event;
  }

  get user(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get flowType(): i32 {
    return this._event.parameters[1].value.toI32();
  }

  get step(): i32 {
    return this._event.parameters[2].value.toI32();
  }

  get success(): boolean {
    return this._event.parameters[3].value.toBoolean();
  }

  get data(): Bytes {
    return this._event.parameters[4].value.toBytes();
  }
}

export class WalletImported extends ethereum.Event {
  get params(): WalletImported__Params {
    return new WalletImported__Params(this);
  }
}

export class WalletImported__Params {
  _event: WalletImported;

  constructor(event: WalletImported) {
    this._event = event;
  }

  get user(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get walletId(): Bytes {
    return this._event.parameters[1].value.toBytes();
  }

  get name(): string {
    return this._event.parameters[2].value.toString();
  }

  get timestamp(): BigInt {
    return this._event.parameters[3].value.toBigInt();
  }
}

export class WalletVault__fetchWalletBalancesResultBalancesStruct extends ethereum.Tuple {
  get chainType(): i32 {
    return this[0].toI32();
  }

  get tokenSymbol(): string {
    return this[1].toString();
  }

  get balance(): BigInt {
    return this[2].toBigInt();
  }

  get usdValue(): BigInt {
    return this[3].toBigInt();
  }
}

export class WalletVault__getAllChainsResultConfigsStruct extends ethereum.Tuple {
  get chainType(): i32 {
    return this[0].toI32();
  }

  get name(): string {
    return this[1].toString();
  }

  get rpcUrl(): string {
    return this[2].toString();
  }

  get chainId(): BigInt {
    return this[3].toBigInt();
  }

  get isActive(): boolean {
    return this[4].toBoolean();
  }
}

export class WalletVault__getChainConfigResultConfigStruct extends ethereum.Tuple {
  get chainType(): i32 {
    return this[0].toI32();
  }

  get name(): string {
    return this[1].toString();
  }

  get rpcUrl(): string {
    return this[2].toString();
  }

  get chainId(): BigInt {
    return this[3].toBigInt();
  }

  get isActive(): boolean {
    return this[4].toBoolean();
  }
}

export class WalletVault__getMultiChainBalancesResultBalancesStruct extends ethereum.Tuple {
  get chainType(): i32 {
    return this[0].toI32();
  }

  get tokenSymbol(): string {
    return this[1].toString();
  }

  get balance(): BigInt {
    return this[2].toBigInt();
  }

  get usdValue(): BigInt {
    return this[3].toBigInt();
  }
}

export class WalletVault__getWalletInfoResult {
  value0: string;
  value1: Array<i32>;
  value2: boolean;

  constructor(value0: string, value1: Array<i32>, value2: boolean) {
    this.value0 = value0;
    this.value1 = value1;
    this.value2 = value2;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    let map = new TypedMap<string, ethereum.Value>();
    map.set("value0", ethereum.Value.fromString(this.value0));
    map.set("value1", ethereum.Value.fromI32Array(this.value1));
    map.set("value2", ethereum.Value.fromBoolean(this.value2));
    return map;
  }

  getName(): string {
    return this.value0;
  }

  getChainTypes(): Array<i32> {
    return this.value1;
  }

  getIsActive(): boolean {
    return this.value2;
  }
}

export class WalletVault extends ethereum.SmartContract {
  static bind(address: Address): WalletVault {
    return new WalletVault("WalletVault", address);
  }

  batchGetBalances(
    walletAddresses: Array<Address>,
    chainTypes: Array<i32>,
  ): Array<Array<BigInt>> {
    let result = super.call(
      "batchGetBalances",
      "batchGetBalances(address[],uint8[]):(uint256[][])",
      [
        ethereum.Value.fromAddressArray(walletAddresses),
        ethereum.Value.fromI32Array(chainTypes),
      ],
    );

    return result[0].toBigIntMatrix();
  }

  try_batchGetBalances(
    walletAddresses: Array<Address>,
    chainTypes: Array<i32>,
  ): ethereum.CallResult<Array<Array<BigInt>>> {
    let result = super.tryCall(
      "batchGetBalances",
      "batchGetBalances(address[],uint8[]):(uint256[][])",
      [
        ethereum.Value.fromAddressArray(walletAddresses),
        ethereum.Value.fromI32Array(chainTypes),
      ],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigIntMatrix());
  }

  deriveKeysFromSeed(walletId: Bytes, chainTypes: Array<i32>): Array<Address> {
    let result = super.call(
      "deriveKeysFromSeed",
      "deriveKeysFromSeed(bytes32,uint8[]):(address[])",
      [
        ethereum.Value.fromFixedBytes(walletId),
        ethereum.Value.fromI32Array(chainTypes),
      ],
    );

    return result[0].toAddressArray();
  }

  try_deriveKeysFromSeed(
    walletId: Bytes,
    chainTypes: Array<i32>,
  ): ethereum.CallResult<Array<Address>> {
    let result = super.tryCall(
      "deriveKeysFromSeed",
      "deriveKeysFromSeed(bytes32,uint8[]):(address[])",
      [
        ethereum.Value.fromFixedBytes(walletId),
        ethereum.Value.fromI32Array(chainTypes),
      ],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddressArray());
  }

  executeChainRPC(chainType: i32, method: string, params: Bytes): Bytes {
    let result = super.call(
      "executeChainRPC",
      "executeChainRPC(uint8,string,bytes):(bytes)",
      [
        ethereum.Value.fromUnsignedBigInt(BigInt.fromI32(chainType)),
        ethereum.Value.fromString(method),
        ethereum.Value.fromBytes(params),
      ],
    );

    return result[0].toBytes();
  }

  try_executeChainRPC(
    chainType: i32,
    method: string,
    params: Bytes,
  ): ethereum.CallResult<Bytes> {
    let result = super.tryCall(
      "executeChainRPC",
      "executeChainRPC(uint8,string,bytes):(bytes)",
      [
        ethereum.Value.fromUnsignedBigInt(BigInt.fromI32(chainType)),
        ethereum.Value.fromString(method),
        ethereum.Value.fromBytes(params),
      ],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBytes());
  }

  fetchWalletBalances(
    walletId: Bytes,
  ): Array<WalletVault__fetchWalletBalancesResultBalancesStruct> {
    let result = super.call(
      "fetchWalletBalances",
      "fetchWalletBalances(bytes32):((uint8,string,uint256,uint256)[])",
      [ethereum.Value.fromFixedBytes(walletId)],
    );

    return result[0].toTupleArray<WalletVault__fetchWalletBalancesResultBalancesStruct>();
  }

  try_fetchWalletBalances(
    walletId: Bytes,
  ): ethereum.CallResult<
    Array<WalletVault__fetchWalletBalancesResultBalancesStruct>
  > {
    let result = super.tryCall(
      "fetchWalletBalances",
      "fetchWalletBalances(bytes32):((uint8,string,uint256,uint256)[])",
      [ethereum.Value.fromFixedBytes(walletId)],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      value[0].toTupleArray<WalletVault__fetchWalletBalancesResultBalancesStruct>(),
    );
  }

  getAllChains(): Array<WalletVault__getAllChainsResultConfigsStruct> {
    let result = super.call(
      "getAllChains",
      "getAllChains():((uint8,string,string,uint256,bool)[])",
      [],
    );

    return result[0].toTupleArray<WalletVault__getAllChainsResultConfigsStruct>();
  }

  try_getAllChains(): ethereum.CallResult<
    Array<WalletVault__getAllChainsResultConfigsStruct>
  > {
    let result = super.tryCall(
      "getAllChains",
      "getAllChains():((uint8,string,string,uint256,bool)[])",
      [],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      value[0].toTupleArray<WalletVault__getAllChainsResultConfigsStruct>(),
    );
  }

  getChainConfig(
    chainType: i32,
  ): WalletVault__getChainConfigResultConfigStruct {
    let result = super.call(
      "getChainConfig",
      "getChainConfig(uint8):((uint8,string,string,uint256,bool))",
      [ethereum.Value.fromUnsignedBigInt(BigInt.fromI32(chainType))],
    );

    return changetype<WalletVault__getChainConfigResultConfigStruct>(
      result[0].toTuple(),
    );
  }

  try_getChainConfig(
    chainType: i32,
  ): ethereum.CallResult<WalletVault__getChainConfigResultConfigStruct> {
    let result = super.tryCall(
      "getChainConfig",
      "getChainConfig(uint8):((uint8,string,string,uint256,bool))",
      [ethereum.Value.fromUnsignedBigInt(BigInt.fromI32(chainType))],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      changetype<WalletVault__getChainConfigResultConfigStruct>(
        value[0].toTuple(),
      ),
    );
  }

  getDerivedAddress(walletId: Bytes, chainType: i32): Address {
    let result = super.call(
      "getDerivedAddress",
      "getDerivedAddress(bytes32,uint8):(address)",
      [
        ethereum.Value.fromFixedBytes(walletId),
        ethereum.Value.fromUnsignedBigInt(BigInt.fromI32(chainType)),
      ],
    );

    return result[0].toAddress();
  }

  try_getDerivedAddress(
    walletId: Bytes,
    chainType: i32,
  ): ethereum.CallResult<Address> {
    let result = super.tryCall(
      "getDerivedAddress",
      "getDerivedAddress(bytes32,uint8):(address)",
      [
        ethereum.Value.fromFixedBytes(walletId),
        ethereum.Value.fromUnsignedBigInt(BigInt.fromI32(chainType)),
      ],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  getMultiChainBalances(
    wallet: Address,
    chains: Array<i32>,
  ): Array<WalletVault__getMultiChainBalancesResultBalancesStruct> {
    let result = super.call(
      "getMultiChainBalances",
      "getMultiChainBalances(address,uint8[]):((uint8,string,uint256,uint256)[])",
      [ethereum.Value.fromAddress(wallet), ethereum.Value.fromI32Array(chains)],
    );

    return result[0].toTupleArray<WalletVault__getMultiChainBalancesResultBalancesStruct>();
  }

  try_getMultiChainBalances(
    wallet: Address,
    chains: Array<i32>,
  ): ethereum.CallResult<
    Array<WalletVault__getMultiChainBalancesResultBalancesStruct>
  > {
    let result = super.tryCall(
      "getMultiChainBalances",
      "getMultiChainBalances(address,uint8[]):((uint8,string,uint256,uint256)[])",
      [ethereum.Value.fromAddress(wallet), ethereum.Value.fromI32Array(chains)],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      value[0].toTupleArray<WalletVault__getMultiChainBalancesResultBalancesStruct>(),
    );
  }

  getNativeBalance(wallet: Address, chainType: i32): BigInt {
    let result = super.call(
      "getNativeBalance",
      "getNativeBalance(address,uint8):(uint256)",
      [
        ethereum.Value.fromAddress(wallet),
        ethereum.Value.fromUnsignedBigInt(BigInt.fromI32(chainType)),
      ],
    );

    return result[0].toBigInt();
  }

  try_getNativeBalance(
    wallet: Address,
    chainType: i32,
  ): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "getNativeBalance",
      "getNativeBalance(address,uint8):(uint256)",
      [
        ethereum.Value.fromAddress(wallet),
        ethereum.Value.fromUnsignedBigInt(BigInt.fromI32(chainType)),
      ],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  getUserWallets(user: Address): Array<Bytes> {
    let result = super.call(
      "getUserWallets",
      "getUserWallets(address):(bytes32[])",
      [ethereum.Value.fromAddress(user)],
    );

    return result[0].toBytesArray();
  }

  try_getUserWallets(user: Address): ethereum.CallResult<Array<Bytes>> {
    let result = super.tryCall(
      "getUserWallets",
      "getUserWallets(address):(bytes32[])",
      [ethereum.Value.fromAddress(user)],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBytesArray());
  }

  getWalletInfo(walletId: Bytes): WalletVault__getWalletInfoResult {
    let result = super.call(
      "getWalletInfo",
      "getWalletInfo(bytes32):(string,uint8[],bool)",
      [ethereum.Value.fromFixedBytes(walletId)],
    );

    return new WalletVault__getWalletInfoResult(
      result[0].toString(),
      result[1].toI32Array(),
      result[2].toBoolean(),
    );
  }

  try_getWalletInfo(
    walletId: Bytes,
  ): ethereum.CallResult<WalletVault__getWalletInfoResult> {
    let result = super.tryCall(
      "getWalletInfo",
      "getWalletInfo(bytes32):(string,uint8[],bool)",
      [ethereum.Value.fromFixedBytes(walletId)],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      new WalletVault__getWalletInfoResult(
        value[0].toString(),
        value[1].toI32Array(),
        value[2].toBoolean(),
      ),
    );
  }

  importSeedPhrase(encryptedSeed: Bytes, walletName: string): Bytes {
    let result = super.call(
      "importSeedPhrase",
      "importSeedPhrase(bytes,string):(bytes32)",
      [
        ethereum.Value.fromBytes(encryptedSeed),
        ethereum.Value.fromString(walletName),
      ],
    );

    return result[0].toBytes();
  }

  try_importSeedPhrase(
    encryptedSeed: Bytes,
    walletName: string,
  ): ethereum.CallResult<Bytes> {
    let result = super.tryCall(
      "importSeedPhrase",
      "importSeedPhrase(bytes,string):(bytes32)",
      [
        ethereum.Value.fromBytes(encryptedSeed),
        ethereum.Value.fromString(walletName),
      ],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBytes());
  }

  isPaused(): boolean {
    let result = super.call("isPaused", "isPaused():(bool)", []);

    return result[0].toBoolean();
  }

  try_isPaused(): ethereum.CallResult<boolean> {
    let result = super.tryCall("isPaused", "isPaused():(bool)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  owner(): Address {
    let result = super.call("owner", "owner():(address)", []);

    return result[0].toAddress();
  }

  try_owner(): ethereum.CallResult<Address> {
    let result = super.tryCall("owner", "owner():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  signTransaction(
    walletId: Bytes,
    chainType: i32,
    txHash: Bytes,
    txData: Bytes,
  ): Bytes {
    let result = super.call(
      "signTransaction",
      "signTransaction(bytes32,uint8,bytes32,bytes):(bytes)",
      [
        ethereum.Value.fromFixedBytes(walletId),
        ethereum.Value.fromUnsignedBigInt(BigInt.fromI32(chainType)),
        ethereum.Value.fromFixedBytes(txHash),
        ethereum.Value.fromBytes(txData),
      ],
    );

    return result[0].toBytes();
  }

  try_signTransaction(
    walletId: Bytes,
    chainType: i32,
    txHash: Bytes,
    txData: Bytes,
  ): ethereum.CallResult<Bytes> {
    let result = super.tryCall(
      "signTransaction",
      "signTransaction(bytes32,uint8,bytes32,bytes):(bytes)",
      [
        ethereum.Value.fromFixedBytes(walletId),
        ethereum.Value.fromUnsignedBigInt(BigInt.fromI32(chainType)),
        ethereum.Value.fromFixedBytes(txHash),
        ethereum.Value.fromBytes(txData),
      ],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBytes());
  }
}

export class ConstructorCall extends ethereum.Call {
  get inputs(): ConstructorCall__Inputs {
    return new ConstructorCall__Inputs(this);
  }

  get outputs(): ConstructorCall__Outputs {
    return new ConstructorCall__Outputs(this);
  }
}

export class ConstructorCall__Inputs {
  _call: ConstructorCall;

  constructor(call: ConstructorCall) {
    this._call = call;
  }
}

export class ConstructorCall__Outputs {
  _call: ConstructorCall;

  constructor(call: ConstructorCall) {
    this._call = call;
  }
}

export class DeriveKeysFromSeedCall extends ethereum.Call {
  get inputs(): DeriveKeysFromSeedCall__Inputs {
    return new DeriveKeysFromSeedCall__Inputs(this);
  }

  get outputs(): DeriveKeysFromSeedCall__Outputs {
    return new DeriveKeysFromSeedCall__Outputs(this);
  }
}

export class DeriveKeysFromSeedCall__Inputs {
  _call: DeriveKeysFromSeedCall;

  constructor(call: DeriveKeysFromSeedCall) {
    this._call = call;
  }

  get walletId(): Bytes {
    return this._call.inputValues[0].value.toBytes();
  }

  get chainTypes(): Array<i32> {
    return this._call.inputValues[1].value.toI32Array();
  }
}

export class DeriveKeysFromSeedCall__Outputs {
  _call: DeriveKeysFromSeedCall;

  constructor(call: DeriveKeysFromSeedCall) {
    this._call = call;
  }

  get addresses(): Array<Address> {
    return this._call.outputValues[0].value.toAddressArray();
  }
}

export class EmitUserFlowEventCall extends ethereum.Call {
  get inputs(): EmitUserFlowEventCall__Inputs {
    return new EmitUserFlowEventCall__Inputs(this);
  }

  get outputs(): EmitUserFlowEventCall__Outputs {
    return new EmitUserFlowEventCall__Outputs(this);
  }
}

export class EmitUserFlowEventCall__Inputs {
  _call: EmitUserFlowEventCall;

  constructor(call: EmitUserFlowEventCall) {
    this._call = call;
  }

  get user(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get flowType(): i32 {
    return this._call.inputValues[1].value.toI32();
  }

  get step(): i32 {
    return this._call.inputValues[2].value.toI32();
  }

  get success(): boolean {
    return this._call.inputValues[3].value.toBoolean();
  }

  get data(): Bytes {
    return this._call.inputValues[4].value.toBytes();
  }
}

export class EmitUserFlowEventCall__Outputs {
  _call: EmitUserFlowEventCall;

  constructor(call: EmitUserFlowEventCall) {
    this._call = call;
  }
}

export class EmitVaultEventCall extends ethereum.Call {
  get inputs(): EmitVaultEventCall__Inputs {
    return new EmitVaultEventCall__Inputs(this);
  }

  get outputs(): EmitVaultEventCall__Outputs {
    return new EmitVaultEventCall__Outputs(this);
  }
}

export class EmitVaultEventCall__Inputs {
  _call: EmitVaultEventCall;

  constructor(call: EmitVaultEventCall) {
    this._call = call;
  }

  get user(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get eventType(): i32 {
    return this._call.inputValues[1].value.toI32();
  }

  get data(): Bytes {
    return this._call.inputValues[2].value.toBytes();
  }
}

export class EmitVaultEventCall__Outputs {
  _call: EmitVaultEventCall;

  constructor(call: EmitVaultEventCall) {
    this._call = call;
  }
}

export class ImportSeedPhraseCall extends ethereum.Call {
  get inputs(): ImportSeedPhraseCall__Inputs {
    return new ImportSeedPhraseCall__Inputs(this);
  }

  get outputs(): ImportSeedPhraseCall__Outputs {
    return new ImportSeedPhraseCall__Outputs(this);
  }
}

export class ImportSeedPhraseCall__Inputs {
  _call: ImportSeedPhraseCall;

  constructor(call: ImportSeedPhraseCall) {
    this._call = call;
  }

  get encryptedSeed(): Bytes {
    return this._call.inputValues[0].value.toBytes();
  }

  get walletName(): string {
    return this._call.inputValues[1].value.toString();
  }
}

export class ImportSeedPhraseCall__Outputs {
  _call: ImportSeedPhraseCall;

  constructor(call: ImportSeedPhraseCall) {
    this._call = call;
  }

  get walletId(): Bytes {
    return this._call.outputValues[0].value.toBytes();
  }
}

export class PauseCall extends ethereum.Call {
  get inputs(): PauseCall__Inputs {
    return new PauseCall__Inputs(this);
  }

  get outputs(): PauseCall__Outputs {
    return new PauseCall__Outputs(this);
  }
}

export class PauseCall__Inputs {
  _call: PauseCall;

  constructor(call: PauseCall) {
    this._call = call;
  }
}

export class PauseCall__Outputs {
  _call: PauseCall;

  constructor(call: PauseCall) {
    this._call = call;
  }
}

export class SignTransactionCall extends ethereum.Call {
  get inputs(): SignTransactionCall__Inputs {
    return new SignTransactionCall__Inputs(this);
  }

  get outputs(): SignTransactionCall__Outputs {
    return new SignTransactionCall__Outputs(this);
  }
}

export class SignTransactionCall__Inputs {
  _call: SignTransactionCall;

  constructor(call: SignTransactionCall) {
    this._call = call;
  }

  get walletId(): Bytes {
    return this._call.inputValues[0].value.toBytes();
  }

  get chainType(): i32 {
    return this._call.inputValues[1].value.toI32();
  }

  get txHash(): Bytes {
    return this._call.inputValues[2].value.toBytes();
  }

  get txData(): Bytes {
    return this._call.inputValues[3].value.toBytes();
  }
}

export class SignTransactionCall__Outputs {
  _call: SignTransactionCall;

  constructor(call: SignTransactionCall) {
    this._call = call;
  }

  get signature(): Bytes {
    return this._call.outputValues[0].value.toBytes();
  }
}

export class UnpauseCall extends ethereum.Call {
  get inputs(): UnpauseCall__Inputs {
    return new UnpauseCall__Inputs(this);
  }

  get outputs(): UnpauseCall__Outputs {
    return new UnpauseCall__Outputs(this);
  }
}

export class UnpauseCall__Inputs {
  _call: UnpauseCall;

  constructor(call: UnpauseCall) {
    this._call = call;
  }
}

export class UnpauseCall__Outputs {
  _call: UnpauseCall;

  constructor(call: UnpauseCall) {
    this._call = call;
  }
}

export class UpdateChainRPCCall extends ethereum.Call {
  get inputs(): UpdateChainRPCCall__Inputs {
    return new UpdateChainRPCCall__Inputs(this);
  }

  get outputs(): UpdateChainRPCCall__Outputs {
    return new UpdateChainRPCCall__Outputs(this);
  }
}

export class UpdateChainRPCCall__Inputs {
  _call: UpdateChainRPCCall;

  constructor(call: UpdateChainRPCCall) {
    this._call = call;
  }

  get chainType(): i32 {
    return this._call.inputValues[0].value.toI32();
  }

  get rpcUrl(): string {
    return this._call.inputValues[1].value.toString();
  }
}

export class UpdateChainRPCCall__Outputs {
  _call: UpdateChainRPCCall;

  constructor(call: UpdateChainRPCCall) {
    this._call = call;
  }
}

export class UpdateWalletMetadataCall extends ethereum.Call {
  get inputs(): UpdateWalletMetadataCall__Inputs {
    return new UpdateWalletMetadataCall__Inputs(this);
  }

  get outputs(): UpdateWalletMetadataCall__Outputs {
    return new UpdateWalletMetadataCall__Outputs(this);
  }
}

export class UpdateWalletMetadataCall__Inputs {
  _call: UpdateWalletMetadataCall;

  constructor(call: UpdateWalletMetadataCall) {
    this._call = call;
  }

  get walletId(): Bytes {
    return this._call.inputValues[0].value.toBytes();
  }

  get name(): string {
    return this._call.inputValues[1].value.toString();
  }

  get isActive(): boolean {
    return this._call.inputValues[2].value.toBoolean();
  }
}

export class UpdateWalletMetadataCall__Outputs {
  _call: UpdateWalletMetadataCall;

  constructor(call: UpdateWalletMetadataCall) {
    this._call = call;
  }
}
