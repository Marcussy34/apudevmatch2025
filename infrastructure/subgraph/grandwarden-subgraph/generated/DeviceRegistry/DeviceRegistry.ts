// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.

import {
  ethereum,
  JSONValue,
  TypedMap,
  Entity,
  Bytes,
  Address,
  BigInt,
} from "@graphprotocol/graph-ts";

export class AccessGranted extends ethereum.Event {
  get params(): AccessGranted__Params {
    return new AccessGranted__Params(this);
  }
}

export class AccessGranted__Params {
  _event: AccessGranted;

  constructor(event: AccessGranted) {
    this._event = event;
  }

  get user(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get resourceId(): Bytes {
    return this._event.parameters[1].value.toBytes();
  }

  get grantee(): Address {
    return this._event.parameters[2].value.toAddress();
  }
}

export class AccessRevoked extends ethereum.Event {
  get params(): AccessRevoked__Params {
    return new AccessRevoked__Params(this);
  }
}

export class AccessRevoked__Params {
  _event: AccessRevoked;

  constructor(event: AccessRevoked) {
    this._event = event;
  }

  get user(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get resourceId(): Bytes {
    return this._event.parameters[1].value.toBytes();
  }

  get revokee(): Address {
    return this._event.parameters[2].value.toAddress();
  }
}

export class ChainBalanceUpdated extends ethereum.Event {
  get params(): ChainBalanceUpdated__Params {
    return new ChainBalanceUpdated__Params(this);
  }
}

export class ChainBalanceUpdated__Params {
  _event: ChainBalanceUpdated;

  constructor(event: ChainBalanceUpdated) {
    this._event = event;
  }

  get user(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get walletId(): Bytes {
    return this._event.parameters[1].value.toBytes();
  }

  get chainType(): i32 {
    return this._event.parameters[2].value.toI32();
  }

  get newBalance(): BigInt {
    return this._event.parameters[3].value.toBigInt();
  }
}

export class CrossChainOperationCompleted extends ethereum.Event {
  get params(): CrossChainOperationCompleted__Params {
    return new CrossChainOperationCompleted__Params(this);
  }
}

export class CrossChainOperationCompleted__Params {
  _event: CrossChainOperationCompleted;

  constructor(event: CrossChainOperationCompleted) {
    this._event = event;
  }

  get user(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get operationId(): Bytes {
    return this._event.parameters[1].value.toBytes();
  }

  get success(): boolean {
    return this._event.parameters[2].value.toBoolean();
  }
}

export class CrossChainOperationStarted extends ethereum.Event {
  get params(): CrossChainOperationStarted__Params {
    return new CrossChainOperationStarted__Params(this);
  }
}

export class CrossChainOperationStarted__Params {
  _event: CrossChainOperationStarted;

  constructor(event: CrossChainOperationStarted) {
    this._event = event;
  }

  get user(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get operationId(): Bytes {
    return this._event.parameters[1].value.toBytes();
  }

  get sourceChain(): i32 {
    return this._event.parameters[2].value.toI32();
  }

  get targetChain(): i32 {
    return this._event.parameters[3].value.toI32();
  }
}

export class DeviceAuthenticated extends ethereum.Event {
  get params(): DeviceAuthenticated__Params {
    return new DeviceAuthenticated__Params(this);
  }
}

export class DeviceAuthenticated__Params {
  _event: DeviceAuthenticated;

  constructor(event: DeviceAuthenticated) {
    this._event = event;
  }

  get user(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get deviceId(): Bytes {
    return this._event.parameters[1].value.toBytes();
  }

  get timestamp(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }
}

export class DeviceAuthorized extends ethereum.Event {
  get params(): DeviceAuthorized__Params {
    return new DeviceAuthorized__Params(this);
  }
}

export class DeviceAuthorized__Params {
  _event: DeviceAuthorized;

  constructor(event: DeviceAuthorized) {
    this._event = event;
  }

  get user(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get deviceId(): Bytes {
    return this._event.parameters[1].value.toBytes();
  }

  get deviceAddress(): Address {
    return this._event.parameters[2].value.toAddress();
  }
}

export class DeviceRegistered extends ethereum.Event {
  get params(): DeviceRegistered__Params {
    return new DeviceRegistered__Params(this);
  }
}

export class DeviceRegistered__Params {
  _event: DeviceRegistered;

  constructor(event: DeviceRegistered) {
    this._event = event;
  }

  get user(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get deviceId(): Bytes {
    return this._event.parameters[1].value.toBytes();
  }

  get deviceName(): string {
    return this._event.parameters[2].value.toString();
  }
}

export class DeviceRevoked extends ethereum.Event {
  get params(): DeviceRevoked__Params {
    return new DeviceRevoked__Params(this);
  }
}

export class DeviceRevoked__Params {
  _event: DeviceRevoked;

  constructor(event: DeviceRevoked) {
    this._event = event;
  }

  get user(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get deviceId(): Bytes {
    return this._event.parameters[1].value.toBytes();
  }

  get timestamp(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }
}

export class DeviceStatusChanged extends ethereum.Event {
  get params(): DeviceStatusChanged__Params {
    return new DeviceStatusChanged__Params(this);
  }
}

export class DeviceStatusChanged__Params {
  _event: DeviceStatusChanged;

  constructor(event: DeviceStatusChanged) {
    this._event = event;
  }

  get user(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get deviceId(): Bytes {
    return this._event.parameters[1].value.toBytes();
  }

  get newStatus(): i32 {
    return this._event.parameters[2].value.toI32();
  }
}

export class EmergencyShutdown extends ethereum.Event {
  get params(): EmergencyShutdown__Params {
    return new EmergencyShutdown__Params(this);
  }
}

export class EmergencyShutdown__Params {
  _event: EmergencyShutdown;

  constructor(event: EmergencyShutdown) {
    this._event = event;
  }

  get admin(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get reason(): string {
    return this._event.parameters[1].value.toString();
  }

  get timestamp(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }
}

export class GenericVaultEvent extends ethereum.Event {
  get params(): GenericVaultEvent__Params {
    return new GenericVaultEvent__Params(this);
  }
}

export class GenericVaultEvent__Params {
  _event: GenericVaultEvent;

  constructor(event: GenericVaultEvent) {
    this._event = event;
  }

  get user(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get eventType(): i32 {
    return this._event.parameters[1].value.toI32();
  }

  get data(): Bytes {
    return this._event.parameters[2].value.toBytes();
  }
}

export class SecurityAlert extends ethereum.Event {
  get params(): SecurityAlert__Params {
    return new SecurityAlert__Params(this);
  }
}

export class SecurityAlert__Params {
  _event: SecurityAlert;

  constructor(event: SecurityAlert) {
    this._event = event;
  }

  get user(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get alertType(): i32 {
    return this._event.parameters[1].value.toI32();
  }

  get description(): string {
    return this._event.parameters[2].value.toString();
  }

  get timestamp(): BigInt {
    return this._event.parameters[3].value.toBigInt();
  }
}

export class SystemHealthCheck extends ethereum.Event {
  get params(): SystemHealthCheck__Params {
    return new SystemHealthCheck__Params(this);
  }
}

export class SystemHealthCheck__Params {
  _event: SystemHealthCheck;

  constructor(event: SystemHealthCheck) {
    this._event = event;
  }

  get timestamp(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }

  get healthy(): boolean {
    return this._event.parameters[1].value.toBoolean();
  }

  get details(): string {
    return this._event.parameters[2].value.toString();
  }
}

export class SystemRecovery extends ethereum.Event {
  get params(): SystemRecovery__Params {
    return new SystemRecovery__Params(this);
  }
}

export class SystemRecovery__Params {
  _event: SystemRecovery;

  constructor(event: SystemRecovery) {
    this._event = event;
  }

  get admin(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get timestamp(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }
}

export class TransactionSigned extends ethereum.Event {
  get params(): TransactionSigned__Params {
    return new TransactionSigned__Params(this);
  }
}

export class TransactionSigned__Params {
  _event: TransactionSigned;

  constructor(event: TransactionSigned) {
    this._event = event;
  }

  get user(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get walletId(): Bytes {
    return this._event.parameters[1].value.toBytes();
  }

  get txHash(): Bytes {
    return this._event.parameters[2].value.toBytes();
  }

  get chainType(): i32 {
    return this._event.parameters[3].value.toI32();
  }
}

export class UnauthorizedAccess extends ethereum.Event {
  get params(): UnauthorizedAccess__Params {
    return new UnauthorizedAccess__Params(this);
  }
}

export class UnauthorizedAccess__Params {
  _event: UnauthorizedAccess;

  constructor(event: UnauthorizedAccess) {
    this._event = event;
  }

  get user(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get unauthorized(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get resource(): string {
    return this._event.parameters[2].value.toString();
  }
}

export class UserFlowEvent extends ethereum.Event {
  get params(): UserFlowEvent__Params {
    return new UserFlowEvent__Params(this);
  }
}

export class UserFlowEvent__Params {
  _event: UserFlowEvent;

  constructor(event: UserFlowEvent) {
    this._event = event;
  }

  get user(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get flowType(): i32 {
    return this._event.parameters[1].value.toI32();
  }

  get step(): i32 {
    return this._event.parameters[2].value.toI32();
  }

  get success(): boolean {
    return this._event.parameters[3].value.toBoolean();
  }

  get data(): Bytes {
    return this._event.parameters[4].value.toBytes();
  }
}

export class DeviceRegistry__getDeviceResultDeviceStruct extends ethereum.Tuple {
  get id(): Bytes {
    return this[0].toBytes();
  }

  get owner(): Address {
    return this[1].toAddress();
  }

  get name(): string {
    return this[2].toString();
  }

  get publicKeyHash(): Bytes {
    return this[3].toBytes();
  }

  get deviceFingerprint(): Bytes {
    return this[4].toBytes();
  }

  get status(): i32 {
    return this[5].toI32();
  }

  get registeredAt(): BigInt {
    return this[6].toBigInt();
  }

  get lastUsed(): BigInt {
    return this[7].toBigInt();
  }

  get authCount(): BigInt {
    return this[8].toBigInt();
  }

  get exists(): boolean {
    return this[9].toBoolean();
  }
}

export class DeviceRegistry__getDeviceAuthHistoryResultAuthsStruct extends ethereum.Tuple {
  get deviceId(): Bytes {
    return this[0].toBytes();
  }

  get challenge(): Bytes {
    return this[1].toBytes();
  }

  get signature(): Bytes {
    return this[2].toBytes();
  }

  get timestamp(): BigInt {
    return this[3].toBigInt();
  }

  get verified(): boolean {
    return this[4].toBoolean();
  }
}

export class DeviceRegistry extends ethereum.SmartContract {
  static bind(address: Address): DeviceRegistry {
    return new DeviceRegistry("DeviceRegistry", address);
  }

  authChallengeExpiry(): BigInt {
    let result = super.call(
      "authChallengeExpiry",
      "authChallengeExpiry():(uint256)",
      [],
    );

    return result[0].toBigInt();
  }

  try_authChallengeExpiry(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "authChallengeExpiry",
      "authChallengeExpiry():(uint256)",
      [],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  authenticateDevice(
    deviceId: Bytes,
    challenge: Bytes,
    signature: Bytes,
  ): boolean {
    let result = super.call(
      "authenticateDevice",
      "authenticateDevice(bytes32,bytes32,bytes):(bool)",
      [
        ethereum.Value.fromFixedBytes(deviceId),
        ethereum.Value.fromFixedBytes(challenge),
        ethereum.Value.fromBytes(signature),
      ],
    );

    return result[0].toBoolean();
  }

  try_authenticateDevice(
    deviceId: Bytes,
    challenge: Bytes,
    signature: Bytes,
  ): ethereum.CallResult<boolean> {
    let result = super.tryCall(
      "authenticateDevice",
      "authenticateDevice(bytes32,bytes32,bytes):(bool)",
      [
        ethereum.Value.fromFixedBytes(deviceId),
        ethereum.Value.fromFixedBytes(challenge),
        ethereum.Value.fromBytes(signature),
      ],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  defaultMaxDevices(): BigInt {
    let result = super.call(
      "defaultMaxDevices",
      "defaultMaxDevices():(uint256)",
      [],
    );

    return result[0].toBigInt();
  }

  try_defaultMaxDevices(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "defaultMaxDevices",
      "defaultMaxDevices():(uint256)",
      [],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  generateAuthChallenge(deviceId: Bytes): Bytes {
    let result = super.call(
      "generateAuthChallenge",
      "generateAuthChallenge(bytes32):(bytes32)",
      [ethereum.Value.fromFixedBytes(deviceId)],
    );

    return result[0].toBytes();
  }

  try_generateAuthChallenge(deviceId: Bytes): ethereum.CallResult<Bytes> {
    let result = super.tryCall(
      "generateAuthChallenge",
      "generateAuthChallenge(bytes32):(bytes32)",
      [ethereum.Value.fromFixedBytes(deviceId)],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBytes());
  }

  getDevice(deviceId: Bytes): DeviceRegistry__getDeviceResultDeviceStruct {
    let result = super.call(
      "getDevice",
      "getDevice(bytes32):((bytes32,address,string,bytes32,bytes,uint8,uint256,uint256,uint256,bool))",
      [ethereum.Value.fromFixedBytes(deviceId)],
    );

    return changetype<DeviceRegistry__getDeviceResultDeviceStruct>(
      result[0].toTuple(),
    );
  }

  try_getDevice(
    deviceId: Bytes,
  ): ethereum.CallResult<DeviceRegistry__getDeviceResultDeviceStruct> {
    let result = super.tryCall(
      "getDevice",
      "getDevice(bytes32):((bytes32,address,string,bytes32,bytes,uint8,uint256,uint256,uint256,bool))",
      [ethereum.Value.fromFixedBytes(deviceId)],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      changetype<DeviceRegistry__getDeviceResultDeviceStruct>(
        value[0].toTuple(),
      ),
    );
  }

  getDeviceAuthHistory(
    deviceId: Bytes,
    limit: BigInt,
  ): Array<DeviceRegistry__getDeviceAuthHistoryResultAuthsStruct> {
    let result = super.call(
      "getDeviceAuthHistory",
      "getDeviceAuthHistory(bytes32,uint256):((bytes32,bytes32,bytes,uint256,bool)[])",
      [
        ethereum.Value.fromFixedBytes(deviceId),
        ethereum.Value.fromUnsignedBigInt(limit),
      ],
    );

    return result[0].toTupleArray<DeviceRegistry__getDeviceAuthHistoryResultAuthsStruct>();
  }

  try_getDeviceAuthHistory(
    deviceId: Bytes,
    limit: BigInt,
  ): ethereum.CallResult<
    Array<DeviceRegistry__getDeviceAuthHistoryResultAuthsStruct>
  > {
    let result = super.tryCall(
      "getDeviceAuthHistory",
      "getDeviceAuthHistory(bytes32,uint256):((bytes32,bytes32,bytes,uint256,bool)[])",
      [
        ethereum.Value.fromFixedBytes(deviceId),
        ethereum.Value.fromUnsignedBigInt(limit),
      ],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      value[0].toTupleArray<DeviceRegistry__getDeviceAuthHistoryResultAuthsStruct>(),
    );
  }

  getDeviceStatus(deviceId: Bytes): i32 {
    let result = super.call(
      "getDeviceStatus",
      "getDeviceStatus(bytes32):(uint8)",
      [ethereum.Value.fromFixedBytes(deviceId)],
    );

    return result[0].toI32();
  }

  try_getDeviceStatus(deviceId: Bytes): ethereum.CallResult<i32> {
    let result = super.tryCall(
      "getDeviceStatus",
      "getDeviceStatus(bytes32):(uint8)",
      [ethereum.Value.fromFixedBytes(deviceId)],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toI32());
  }

  getUserDevices(user: Address): Array<Bytes> {
    let result = super.call(
      "getUserDevices",
      "getUserDevices(address):(bytes32[])",
      [ethereum.Value.fromAddress(user)],
    );

    return result[0].toBytesArray();
  }

  try_getUserDevices(user: Address): ethereum.CallResult<Array<Bytes>> {
    let result = super.tryCall(
      "getUserDevices",
      "getUserDevices(address):(bytes32[])",
      [ethereum.Value.fromAddress(user)],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBytesArray());
  }

  isDeviceAuthorized(deviceId: Bytes): boolean {
    let result = super.call(
      "isDeviceAuthorized",
      "isDeviceAuthorized(bytes32):(bool)",
      [ethereum.Value.fromFixedBytes(deviceId)],
    );

    return result[0].toBoolean();
  }

  try_isDeviceAuthorized(deviceId: Bytes): ethereum.CallResult<boolean> {
    let result = super.tryCall(
      "isDeviceAuthorized",
      "isDeviceAuthorized(bytes32):(bool)",
      [ethereum.Value.fromFixedBytes(deviceId)],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  isPaused(): boolean {
    let result = super.call("isPaused", "isPaused():(bool)", []);

    return result[0].toBoolean();
  }

  try_isPaused(): ethereum.CallResult<boolean> {
    let result = super.tryCall("isPaused", "isPaused():(bool)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  owner(): Address {
    let result = super.call("owner", "owner():(address)", []);

    return result[0].toAddress();
  }

  try_owner(): ethereum.CallResult<Address> {
    let result = super.tryCall("owner", "owner():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  registerDevice(
    deviceName: string,
    publicKeyHash: Bytes,
    deviceFingerprint: Bytes,
  ): Bytes {
    let result = super.call(
      "registerDevice",
      "registerDevice(string,bytes32,bytes):(bytes32)",
      [
        ethereum.Value.fromString(deviceName),
        ethereum.Value.fromFixedBytes(publicKeyHash),
        ethereum.Value.fromBytes(deviceFingerprint),
      ],
    );

    return result[0].toBytes();
  }

  try_registerDevice(
    deviceName: string,
    publicKeyHash: Bytes,
    deviceFingerprint: Bytes,
  ): ethereum.CallResult<Bytes> {
    let result = super.tryCall(
      "registerDevice",
      "registerDevice(string,bytes32,bytes):(bytes32)",
      [
        ethereum.Value.fromString(deviceName),
        ethereum.Value.fromFixedBytes(publicKeyHash),
        ethereum.Value.fromBytes(deviceFingerprint),
      ],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBytes());
  }
}

export class ConstructorCall extends ethereum.Call {
  get inputs(): ConstructorCall__Inputs {
    return new ConstructorCall__Inputs(this);
  }

  get outputs(): ConstructorCall__Outputs {
    return new ConstructorCall__Outputs(this);
  }
}

export class ConstructorCall__Inputs {
  _call: ConstructorCall;

  constructor(call: ConstructorCall) {
    this._call = call;
  }
}

export class ConstructorCall__Outputs {
  _call: ConstructorCall;

  constructor(call: ConstructorCall) {
    this._call = call;
  }
}

export class AuthenticateDeviceCall extends ethereum.Call {
  get inputs(): AuthenticateDeviceCall__Inputs {
    return new AuthenticateDeviceCall__Inputs(this);
  }

  get outputs(): AuthenticateDeviceCall__Outputs {
    return new AuthenticateDeviceCall__Outputs(this);
  }
}

export class AuthenticateDeviceCall__Inputs {
  _call: AuthenticateDeviceCall;

  constructor(call: AuthenticateDeviceCall) {
    this._call = call;
  }

  get deviceId(): Bytes {
    return this._call.inputValues[0].value.toBytes();
  }

  get challenge(): Bytes {
    return this._call.inputValues[1].value.toBytes();
  }

  get signature(): Bytes {
    return this._call.inputValues[2].value.toBytes();
  }
}

export class AuthenticateDeviceCall__Outputs {
  _call: AuthenticateDeviceCall;

  constructor(call: AuthenticateDeviceCall) {
    this._call = call;
  }

  get success(): boolean {
    return this._call.outputValues[0].value.toBoolean();
  }
}

export class EmergencyRevokeDeviceCall extends ethereum.Call {
  get inputs(): EmergencyRevokeDeviceCall__Inputs {
    return new EmergencyRevokeDeviceCall__Inputs(this);
  }

  get outputs(): EmergencyRevokeDeviceCall__Outputs {
    return new EmergencyRevokeDeviceCall__Outputs(this);
  }
}

export class EmergencyRevokeDeviceCall__Inputs {
  _call: EmergencyRevokeDeviceCall;

  constructor(call: EmergencyRevokeDeviceCall) {
    this._call = call;
  }

  get deviceId(): Bytes {
    return this._call.inputValues[0].value.toBytes();
  }

  get reason(): string {
    return this._call.inputValues[1].value.toString();
  }
}

export class EmergencyRevokeDeviceCall__Outputs {
  _call: EmergencyRevokeDeviceCall;

  constructor(call: EmergencyRevokeDeviceCall) {
    this._call = call;
  }
}

export class EmitUserFlowEventCall extends ethereum.Call {
  get inputs(): EmitUserFlowEventCall__Inputs {
    return new EmitUserFlowEventCall__Inputs(this);
  }

  get outputs(): EmitUserFlowEventCall__Outputs {
    return new EmitUserFlowEventCall__Outputs(this);
  }
}

export class EmitUserFlowEventCall__Inputs {
  _call: EmitUserFlowEventCall;

  constructor(call: EmitUserFlowEventCall) {
    this._call = call;
  }

  get user(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get flowType(): i32 {
    return this._call.inputValues[1].value.toI32();
  }

  get step(): i32 {
    return this._call.inputValues[2].value.toI32();
  }

  get success(): boolean {
    return this._call.inputValues[3].value.toBoolean();
  }

  get data(): Bytes {
    return this._call.inputValues[4].value.toBytes();
  }
}

export class EmitUserFlowEventCall__Outputs {
  _call: EmitUserFlowEventCall;

  constructor(call: EmitUserFlowEventCall) {
    this._call = call;
  }
}

export class EmitVaultEventCall extends ethereum.Call {
  get inputs(): EmitVaultEventCall__Inputs {
    return new EmitVaultEventCall__Inputs(this);
  }

  get outputs(): EmitVaultEventCall__Outputs {
    return new EmitVaultEventCall__Outputs(this);
  }
}

export class EmitVaultEventCall__Inputs {
  _call: EmitVaultEventCall;

  constructor(call: EmitVaultEventCall) {
    this._call = call;
  }

  get user(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get eventType(): i32 {
    return this._call.inputValues[1].value.toI32();
  }

  get data(): Bytes {
    return this._call.inputValues[2].value.toBytes();
  }
}

export class EmitVaultEventCall__Outputs {
  _call: EmitVaultEventCall;

  constructor(call: EmitVaultEventCall) {
    this._call = call;
  }
}

export class PauseCall extends ethereum.Call {
  get inputs(): PauseCall__Inputs {
    return new PauseCall__Inputs(this);
  }

  get outputs(): PauseCall__Outputs {
    return new PauseCall__Outputs(this);
  }
}

export class PauseCall__Inputs {
  _call: PauseCall;

  constructor(call: PauseCall) {
    this._call = call;
  }
}

export class PauseCall__Outputs {
  _call: PauseCall;

  constructor(call: PauseCall) {
    this._call = call;
  }
}

export class ReactivateDeviceCall extends ethereum.Call {
  get inputs(): ReactivateDeviceCall__Inputs {
    return new ReactivateDeviceCall__Inputs(this);
  }

  get outputs(): ReactivateDeviceCall__Outputs {
    return new ReactivateDeviceCall__Outputs(this);
  }
}

export class ReactivateDeviceCall__Inputs {
  _call: ReactivateDeviceCall;

  constructor(call: ReactivateDeviceCall) {
    this._call = call;
  }

  get deviceId(): Bytes {
    return this._call.inputValues[0].value.toBytes();
  }
}

export class ReactivateDeviceCall__Outputs {
  _call: ReactivateDeviceCall;

  constructor(call: ReactivateDeviceCall) {
    this._call = call;
  }
}

export class RegisterDeviceCall extends ethereum.Call {
  get inputs(): RegisterDeviceCall__Inputs {
    return new RegisterDeviceCall__Inputs(this);
  }

  get outputs(): RegisterDeviceCall__Outputs {
    return new RegisterDeviceCall__Outputs(this);
  }
}

export class RegisterDeviceCall__Inputs {
  _call: RegisterDeviceCall;

  constructor(call: RegisterDeviceCall) {
    this._call = call;
  }

  get deviceName(): string {
    return this._call.inputValues[0].value.toString();
  }

  get publicKeyHash(): Bytes {
    return this._call.inputValues[1].value.toBytes();
  }

  get deviceFingerprint(): Bytes {
    return this._call.inputValues[2].value.toBytes();
  }
}

export class RegisterDeviceCall__Outputs {
  _call: RegisterDeviceCall;

  constructor(call: RegisterDeviceCall) {
    this._call = call;
  }

  get deviceId(): Bytes {
    return this._call.outputValues[0].value.toBytes();
  }
}

export class RevokeDeviceCall extends ethereum.Call {
  get inputs(): RevokeDeviceCall__Inputs {
    return new RevokeDeviceCall__Inputs(this);
  }

  get outputs(): RevokeDeviceCall__Outputs {
    return new RevokeDeviceCall__Outputs(this);
  }
}

export class RevokeDeviceCall__Inputs {
  _call: RevokeDeviceCall;

  constructor(call: RevokeDeviceCall) {
    this._call = call;
  }

  get deviceId(): Bytes {
    return this._call.inputValues[0].value.toBytes();
  }
}

export class RevokeDeviceCall__Outputs {
  _call: RevokeDeviceCall;

  constructor(call: RevokeDeviceCall) {
    this._call = call;
  }
}

export class SetAuthChallengeExpiryCall extends ethereum.Call {
  get inputs(): SetAuthChallengeExpiryCall__Inputs {
    return new SetAuthChallengeExpiryCall__Inputs(this);
  }

  get outputs(): SetAuthChallengeExpiryCall__Outputs {
    return new SetAuthChallengeExpiryCall__Outputs(this);
  }
}

export class SetAuthChallengeExpiryCall__Inputs {
  _call: SetAuthChallengeExpiryCall;

  constructor(call: SetAuthChallengeExpiryCall) {
    this._call = call;
  }

  get expiry(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }
}

export class SetAuthChallengeExpiryCall__Outputs {
  _call: SetAuthChallengeExpiryCall;

  constructor(call: SetAuthChallengeExpiryCall) {
    this._call = call;
  }
}

export class SetMaxDevicesPerUserCall extends ethereum.Call {
  get inputs(): SetMaxDevicesPerUserCall__Inputs {
    return new SetMaxDevicesPerUserCall__Inputs(this);
  }

  get outputs(): SetMaxDevicesPerUserCall__Outputs {
    return new SetMaxDevicesPerUserCall__Outputs(this);
  }
}

export class SetMaxDevicesPerUserCall__Inputs {
  _call: SetMaxDevicesPerUserCall;

  constructor(call: SetMaxDevicesPerUserCall) {
    this._call = call;
  }

  get user(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get maxDevices(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }
}

export class SetMaxDevicesPerUserCall__Outputs {
  _call: SetMaxDevicesPerUserCall;

  constructor(call: SetMaxDevicesPerUserCall) {
    this._call = call;
  }
}

export class SuspendDeviceCall extends ethereum.Call {
  get inputs(): SuspendDeviceCall__Inputs {
    return new SuspendDeviceCall__Inputs(this);
  }

  get outputs(): SuspendDeviceCall__Outputs {
    return new SuspendDeviceCall__Outputs(this);
  }
}

export class SuspendDeviceCall__Inputs {
  _call: SuspendDeviceCall;

  constructor(call: SuspendDeviceCall) {
    this._call = call;
  }

  get deviceId(): Bytes {
    return this._call.inputValues[0].value.toBytes();
  }
}

export class SuspendDeviceCall__Outputs {
  _call: SuspendDeviceCall;

  constructor(call: SuspendDeviceCall) {
    this._call = call;
  }
}

export class UnpauseCall extends ethereum.Call {
  get inputs(): UnpauseCall__Inputs {
    return new UnpauseCall__Inputs(this);
  }

  get outputs(): UnpauseCall__Outputs {
    return new UnpauseCall__Outputs(this);
  }
}

export class UnpauseCall__Inputs {
  _call: UnpauseCall;

  constructor(call: UnpauseCall) {
    this._call = call;
  }
}

export class UnpauseCall__Outputs {
  _call: UnpauseCall;

  constructor(call: UnpauseCall) {
    this._call = call;
  }
}

export class UpdateDeviceNameCall extends ethereum.Call {
  get inputs(): UpdateDeviceNameCall__Inputs {
    return new UpdateDeviceNameCall__Inputs(this);
  }

  get outputs(): UpdateDeviceNameCall__Outputs {
    return new UpdateDeviceNameCall__Outputs(this);
  }
}

export class UpdateDeviceNameCall__Inputs {
  _call: UpdateDeviceNameCall;

  constructor(call: UpdateDeviceNameCall) {
    this._call = call;
  }

  get deviceId(): Bytes {
    return this._call.inputValues[0].value.toBytes();
  }

  get newName(): string {
    return this._call.inputValues[1].value.toString();
  }
}

export class UpdateDeviceNameCall__Outputs {
  _call: UpdateDeviceNameCall;

  constructor(call: UpdateDeviceNameCall) {
    this._call = call;
  }
}
